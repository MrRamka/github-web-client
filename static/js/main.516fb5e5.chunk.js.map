{"version":3,"sources":["api/user/index.ts","constants/routes.ts","constants/oath.ts","constants/links.ts","constants/errors.ts","shared/colors.ts","shared/Content.tsx","shared/PageWrapper.tsx","shared/LayoutWrapper.tsx","shared/Card.tsx","shared/IconText.tsx","shared/PoppinsText.ts","pages/Login/styles.ts","pages/Login/Login.tsx","pages/LoginOAuth/styles.ts","components/NavigationMenu/types.ts","pages/LoginOAuth/LoginOAuth.tsx","components/NavigationMenu/styles.ts","components/UserInfo/styles.ts","components/UserInfo/UserInfo.tsx","components/AppTitle/AppTitle.tsx","components/NavigationMenu/NavigationMenu.tsx","components/Profile/types.ts","components/Profile/styles.ts","components/ProfileInfo/styles.ts","components/ProfileInfoText/styles.ts","components/ProfileInfoText/ProfileInfoText.tsx","components/ProfileInfo/ProfileInfo.tsx","components/PinnedItems/styles.ts","components/RepositoryStar/styles.ts","components/RepositoryStar/RepositoryStar.tsx","components/RepositoryLanguage/RepositoryLanguage.tsx","helpers/stringUtil.ts","helpers/formatDate.ts","components/RepositoryCard/RepositoryCard.tsx","components/RepositoryCard/PinnedRepositoryCard.tsx","components/RepositoryCard/renders.tsx","components/RepositoryList/RepositoryList.tsx","components/PinnedItems/PinnedItems.tsx","components/UserProfile/styles.ts","components/Search/types.ts","components/Calendar/Calendar.tsx","components/Calendar/ContributionCalendar.tsx","components/UserProfile/BaseUserProfile.tsx","components/Profile/Profile.tsx","pages/Profile/ProfilePage.tsx","components/PrivateRoute/PrivateRoute.tsx","api/ApolloClient.ts","pages/Logout/Logout.tsx","pages/Issues/Issues.tsx","pages/PullRequests/PullRequestsPage.tsx","components/Search/Search.tsx","api/search/queries.ts","api/search/types.ts","components/SearchRepositoriesList/SearchRepositoriesList.tsx","components/UserCard/styles.ts","components/UserCard/UserCard.tsx","components/UserCard/renders.tsx","components/UserList/UserList.tsx","components/UserSearchPage/UserSearchPage.tsx","components/Search/components/ResultList.tsx","components/ExploreList/ExploreList.tsx","pages/Explore/Explore.tsx","api/userRepositories/queries.ts","components/UserRepositoriesList/UserRepositoriesList.tsx","pages/Repositories/RepositoriesPage.tsx","components/RepositoryFiles/column-renderers.tsx","components/RepositoryFiles/RepositoryFiles.tsx","components/RepositoryDescription/RepositoryDescription.tsx","components/RepositoryOpened/styles.ts","components/RepositoryOpened/RepositoryOpened.tsx","components/RepositoryClosed/RepositoryClosed.tsx","pages/NotFound/NotFoundPage.tsx","components/Repository/Repository.tsx","pages/Repository/RepositoryPage.tsx","components/UserProfile/UserProfile.tsx","pages/UserProfile/UserProfilePage.tsx","components/UserInfoBlock/UserInfoBlock.tsx","components/RepositoriesList/RepositoriesList.tsx","pages/UserRepositories/UserRepositoriesPage.tsx","App.tsx","serviceWorker.ts","index.tsx","api/starRepository/index.ts","api/userInfo/queries.ts","api/profile/queries.ts","api/starRepository/queries.ts","api/repository/queries.ts","api/user/queries.ts","api/userInfo/index.ts","api/profile/index.ts","api/repository/index.ts"],"names":["Routes","Links","Errors","Colors","Content","styled","Layout","PageWrapper","div","LayoutWrapper","RepositoryPreviewCard","Card","IconText","icon","text","PoppinsSpan","span","PoppinsText","Typography","Text","Wrapper","GithubLoginLogo","GithubOutlined","LogoWrapper","TextWrapper","BlueLinkOutline","a","WelcomeText","ButtonWrapper","InnerDiv","ViewCodeBlock","GithubViewLogo","ViewCode","ViewCodeLink","Login","url","process","href","L","REPO","target","MenuType","pulse","keyframes","GithubOAuthLoginLogo","GithubLogoutLogo","LoginOAuth","history","useHistory","useEffect","code","window","location","match","newCode","pop","fetch","then","response","json","token","localStorage","setItem","setTimeout","push","R","ROOT","MenuItem","Menu","Item","Title","TitleBlock","AvatarBlock","StyledDiv","AvatarCell","UserInfo","useQuery","GET_USER_INFO","loading","data","useState","avatarUrl","setAvatarUrl","name","setName","login","setLogin","viewer","src","shape","size","type","iconStyle","fontSize","margin","color","titleStyle","AppTitle","style","level","Sider","NavigationMenu","urlName","pathname","split","handleClick","useCallback","pathName","PROFILE","ISSUES","PULL_REQUESTS","EXPLORE","REPOSITORIES","LOGOUT","navItems","useMemo","key","UserOutlined","onClick","selectedItem","newUrl","handleProfileClick","width","theme","mode","defaultSelectedKeys","map","value","baseEmptyProfileInfo","contributionsCollection","contributionCalendar","totalContributions","weeks","id","followers","totalCount","following","repositories","nodes","pinnedItems","emptyProfileInfo","emptyUserProfileInfo","user","ProfileWrapper","InfoBlock","ImageInfoBlock","TextInfoBlock","InfoWrapper","Name","p","LoginText","FollowingWrapper","FollowersWrapper","GithubLinkLogo","InfoPositionText","ProfileInfoText","ProfileInfo","PinnedItemsWrapper","StyledStarFilled","StarFilled","StyledStarOutlined","StarOutlined","RepositoryStar","count","hasStarred","emptyData","addStar","starrable","stargazerCount","viewerHasStarred","countStars","setCountStars","starred","setStarred","useMutation","ADD_STARR_QUERY","REMOVE_STARR_QUERY","removeStar","handleAddStar","event","stopPropagation","variables","catch","message","error","ACCESS_RESTRICTED","handleRemoveStar","RepositoryLanguage","languages","Date","makeNullStringToEmptyString","months","formatDate","date","parse","getDate","getMonth","getFullYear","RepositoryCard","nameWithOwner","owner","description","pushedAt","formatted_date","title","PinnedRepositoryCard","renderRepositoryCard","item","renderPinnedRepositoryCard","RepositoryList","pageSize","pinnedCard","itemLayout","dataSource","renderItem","pagination","PinnedItems","SearchTypes","ContributionCalendarWrapper","GitHubCalendar","props","monthLabelHeight","weekLabelWidth","panelSize","panelMargin","state","columns","maxWidth","row","col","bounds","this","x","y","lastDay","d","dayjs","format","dateFormat","lastWeekend","endOf","endDate","result","i","j","subtract","month","values","until","contributions","makeCalendarData","innerDom","contribution","pos","getPanelPosition","panelColors","length","dom","height","fill","weekNames","textBasePos","alignmentBaseline","textAnchor","prevMonth","c","monthNames","onResize","rect","updateSize","measureRef","ref","fontFamily","visibleWeeks","Math","floor","setState","min","React","Component","ContributionCalendar","calendarData","calendarDays","setCalendarDays","conventData","weekDay","contributionCount","newCalendarData","forEach","contributionDays","day","newDay","formattedDay","toString","Link","BaseUserProfile","justify","fontWeight","Profile","profileInfo","setProfileInfo","setPinnedItems","GET_PROFILE_QUERY","ProfilePage","PrivateRoute","params","userToken","getItem","isNil","to","LOGIN","httpLink","HttpLink","uri","API","authLink","ApolloLink","operation","forward","setContext","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","Logout","removeItem","Issues","PullRequestsPage","Search","Input","Option","Select","GlobalSearch","setSearchValue","setSearchType","onChangeSearchType","selectSearchItem","defaultValue","REPOSITORY","className","onChange","USER","onSearch","autoFocus","addonBefore","placeholder","allowClear","TypeName","GET_SEARCH_QUERY","gql","SearchRepositoriesList","searchVariables","repositoryResult","setRepositoryResult","search","ListItem","List","StyledCard","UserCard","bio","email","actions","Meta","avatar","renderUserCard","UserList","UserSearchPage","userResult","setUserResult","users","filter","__typename","ORGANIZATION","ResultList","searchType","query","ExploreList","searchValue","Explore","GET_USER_REPOSITORIES","UserRepositoriesList","setRepositories","RepositoriesPage","renderIsBinary","_","file","object","isBinary","renderByteSize","byteSize","renderType","obj","FileTwoTone","FolderTwoTone","RepositoryFiles","files","rowKey","oid","dataIndex","render","filters","onFilter","record","RepositoryDescription","info","repository","createdAt","bordered","diskUsage","UsernameWrapper","RepositoryOpened","username","RepositoryClosed","goBack","status","extra","NotFoundPage","subTitle","handleBackToRoot","initialRepository","isArchived","isPrivate","isDisabled","isEmpty","isLocked","isSecurityPolicyEnabled","entries","Repository","useParams","open","setOpen","repositoryInfo","setRepositoryInfo","repositoryFiles","setRepositoryFiles","errors","setErrors","GET_REPOSITORY","spinning","RepositoryPage","UserProfile","GET_USER_QUERY","UserProfilePage","UserInfoBlock","RepositoriesList","UserRepositoriesPage","App","exact","path","component","OATH_LOGIN","USER_REPOSITORY","NOT_FOUND","Boolean","hostname","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.516fb5e5.chunk.js","sourcesContent":["export * from './queries';\r\nexport * from  './types';\r\n","export enum Routes {\r\n\tAPI = 'https://api.github.com/graphql',\r\n\tROOT = '/',\r\n\tLOGIN = '/login',\r\n\tOATH_LOGIN = '/login/oauth/access_token',\r\n\tPROFILE = '/profile',\r\n\tISSUES = '/issues',\r\n\tPULL_REQUESTS = '/pull_requests',\r\n\tEXPLORE = '/explore',\r\n\tREPOSITORIES = '/repositories',\r\n\tREPOSITORY = '/repository/:username/:repository',\r\n\t// Check this: https://stackoverflow.com/questions/30012770/regex-for-username\r\n\tUSER = '/users/:username',\r\n\tUSER_REPOSITORY = '/repositories/:username',\r\n\tLOGOUT = '/logout',\r\n\tNOT_FOUND = '/not_found'\r\n}\r\n","export const CLIENT_ID = process.env.REACT_APP_CLIENT_ID;\r\nexport const REDIRECT_URI = process.env.REACT_APP_REDIRECT_URI;\r\nexport const AUTH_API_URI = process.env.REACT_APP_AUTH_API_URI;\r\n","export enum Links{\r\n    REPO = 'https://github.com/MrRamka/github-web-client',\r\n}\r\n","export enum Errors {\r\n    ACCESS_RESTRICTED = 'Repository owner has enabled OAuth App access restrictions, meaning that data access to third-parties is limited.'\r\n}\r\n","export const Colors = {\r\n\t//Daybreak Blue\r\n\tblue_1: '#E6F7FF',\r\n\tblue_2: '#BAE7FF',\r\n\tblue_3: '#91D5FF',\r\n\tblue_4: '#69C0FF',\r\n\tblue_5: '#40A9FF',\r\n\tblue_6: '#109CF1',\r\n\tblue_7: '#096DD9',\r\n\tblue_8: '#0050B3',\r\n\tblue_9: '#003A8C',\r\n\tblue_10: '#002766',\r\n\tblue_11: '#011B4A',\r\n\tblue_12: '#334D6E',\r\n\tblue_115: '#808DA4',\r\n\t//Neutral Color Palette\r\n\tgray_1: '#FFFFFF',\r\n\tgray_2: '#FAFAFA',\r\n\tgray_3: '#F5F5F5',\r\n\tgray_35: '#F3F3F3',\r\n\tgray_4: '#E8E8E8',\r\n\tgray_5: '#D9D9D9',\r\n\tgray_6: '#BFBFBF',\r\n\tgray_7: '#8C8C8C',\r\n\tgray_8: '#595959',\r\n\tgray_9: '#262626',\r\n\tgray_95: '#151B25',\r\n\tgray_10: '#000000',\r\n\t//dust red\r\n\tred_1: '#fff1f0',\r\n\tred_2: '#ffccc7',\r\n\tred_3: '#ffa39e',\r\n\tred_4: '#ff7875',\r\n\tred_5: '#ff4d4f',\r\n\tred_6: '#f5222d',\r\n\tred_7: '#cf1322',\r\n\tred_8: '#a8071a',\r\n\tred_9: '#820014',\r\n\tred_10: '#5c0011',\r\n\t//volcano\r\n\tvolcano_1: '#fff2e8',\r\n\tvolcano_2: '#ffd8bf',\r\n\tvolcano_3: '#ffbb96',\r\n\tvolcano_4: '#ff9c6e',\r\n\tvolcano_5: '#ff7a45',\r\n\tvolcano_6: '#fa541c',\r\n\tvolcano_7: '#d4380d',\r\n\tvolcano_8: '#ad2102',\r\n\tvolcano_9: '#871400',\r\n\tvolcano_10: '#610b00',\r\n\t//sunset orange\r\n\torange_1: '#fff7e6',\r\n\torange_2: '#ffe7ba',\r\n\torange_3: '#ffd591',\r\n\torange_4: '#ffc069',\r\n\torange_5: '#ffa940',\r\n\torange_6: '#fa8c16',\r\n\torange_7: '#d46b08',\r\n\torange_8: '#ad4e00',\r\n\torange_9: '#873800',\r\n\torange_10: '#612500',\r\n\t//polar green\r\n\tgreen_1: '#f6ffed',\r\n\tgreen_2: '#d9f7be',\r\n\tgreen_3: '#b7eb8f',\r\n\tgreen_4: '#95de64',\r\n\tgreen_5: '#73d13d',\r\n\tgreen_6: '#52c41a',\r\n\tgreen_7: '#389e0d',\r\n\tgreen_8: '#237804',\r\n\tgreen_9: '#135200',\r\n\tgreen_10: '#092b00',\r\n};\r\n","import styled from 'styled-components';\r\nimport { Layout } from 'antd';\r\nimport { Colors } from './colors';\r\n\r\nexport const Content = styled(Layout.Content)`\r\n\tbackground-color: ${Colors.gray_3};\r\n\tpadding: 24px;\r\n\tmargin: 0px;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { Colors } from \"./colors\";\r\n\r\nexport const PageWrapper = styled.div`\r\n\tbackground-color: ${Colors.gray_3};\r\n\tmin-height: 100vh;\r\n`;\r\n","import styled from \"styled-components\";\r\nimport { Layout } from \"antd\";\r\n\r\nexport const LayoutWrapper = styled(Layout)`\r\n\tmin-height: 100vh;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Card } from 'antd';\r\n\r\nexport const RepositoryPreviewCard = styled(Card)`\r\n    margin-top: 1rem;\r\n    cursor: pointer;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { Space } from 'antd';\r\n\r\ninterface IconTextProps {\r\n    icon: React.ReactNode;\r\n    text: string;\r\n}\r\n\r\nexport const IconText: FC<IconTextProps> = ({icon, text}) => {\r\n    return (\r\n        <Space>\r\n            {icon}\r\n            {text}\r\n        </Space>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Typography } from 'antd';\r\n\r\nexport const PoppinsSpan = styled.span`\r\n\tfont-family: 'Poppins', serif;\r\n`;\r\n\r\nexport const PoppinsText = styled(Typography.Text)`\r\n\tfont-family: 'Poppins', serif;\r\n`;\r\n","import styled from 'styled-components';\r\nimport { Colors } from '../../shared';\r\nimport { GithubOutlined } from '@ant-design/icons/lib';\r\nimport { PoppinsText } from '../../shared';\r\n\r\nexport const Wrapper = styled.div`\r\n\theight: 90vh;\r\n\tdisplay: flex;\r\n\twidth: 100%;\r\n\talign-items: center;\r\n\tjustify-content: space-around;\r\n`;\r\n\r\nexport const GithubLoginLogo = styled(GithubOutlined)`\r\n\tfont-size: 25rem;\r\n\tcolor: ${Colors.blue_6}\r\n`;\r\n\r\nexport const LogoWrapper = styled.div`\r\n\twidth: 40%;\r\n\theight: 25rem;\r\n\tdisplay: flex;\r\n\tjustify-content: flex-end;\r\n`;\r\n\r\nexport const TextWrapper = styled.div`\r\n\twidth: 50%;\r\n\theight: 25rem;\r\n`;\r\nexport const BlueLinkOutline = styled.a`\r\n\tborder: 2px solid;\r\n\tcolor: ${Colors.blue_6};\r\n\tbackground-color: ${Colors.gray_3};\r\n\tborder-color: ${Colors.blue_6};\r\n\tborder-radius: 10px;\r\n\tfont-size: 1.7rem;\r\n\tfont-family: 'Poppins', serif;\r\n\tpadding: 0.7rem 3rem;\r\n`;\r\n\r\nexport const WelcomeText = styled(PoppinsText)`\r\n\tfont-family: 'Poppins', serif;\r\n\tcolor: ${Colors.blue_12};\r\n\tfont-size: 1.5rem;\r\n\tfont-weight: bold;\r\n`;\r\n\r\nexport const ButtonWrapper = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n`;\r\n\r\nexport const InnerDiv = styled.div`\r\n\theight: 25rem;\r\n\twidth: 70%;\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: space-between;\r\n`;\r\n\r\nexport const ViewCodeBlock = styled.div`\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n`;\r\n\r\nexport const GithubViewLogo = styled(GithubOutlined)`\r\n\tfont-size: 4rem;\r\n\tcolor: ${Colors.blue_12}\r\n`;\r\n\r\nexport const ViewCode = styled.div`\r\n\twidth: 15%;\r\n\tdisplay: flex;\r\n\talign-items: center;\r\n`;\r\n\r\nexport const ViewCodeLink = styled.a`\r\n\tcolor: ${Colors.blue_12};\r\n\tfont-family: 'Poppins', serif;\r\n\tfont-size: 1.3rem;\r\n\tfont-weight: bold;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport { CLIENT_ID, REDIRECT_URI, Links as L } from '../../constants';\r\nimport {\r\n    BlueLinkOutline,\r\n    ButtonWrapper,\r\n    GithubLoginLogo,\r\n    GithubViewLogo,\r\n    InnerDiv,\r\n    LogoWrapper,\r\n    TextWrapper,\r\n    ViewCode,\r\n    ViewCodeBlock,\r\n    ViewCodeLink,\r\n    WelcomeText,\r\n    Wrapper\r\n} from './styles';\r\nimport { PageWrapper } from '../../shared';\r\nimport Title from 'antd/lib/typography/Title';\r\n\r\n/**\r\n * Component for Login Page\r\n */\r\nexport const Login: FC = () => {\r\n\r\n    /**\r\n     * OAuth url for authorization\r\n     * And redirect to LoginOAuth\r\n     */\r\n    const url = `https://github.com/login/oauth/authorize?client_id=${CLIENT_ID}&scope=user,gist,public_repo&redirect_uri=${REDIRECT_URI}`;\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <Wrapper>\r\n                <LogoWrapper>\r\n                    <GithubLoginLogo/>\r\n                </LogoWrapper>\r\n                <TextWrapper>\r\n                    <InnerDiv>\r\n                        <div>\r\n                            <WelcomeText>\r\n                                <Title>Github Web Client</Title>\r\n                                Simple. Beautiful. Practish. Good.\r\n                                a\r\n                                <br/>\r\n                                A minimal React application using Apollo Client with GitHub's GraphQL API.\r\n                                <br/>\r\n                                Easy-to-use client for viewing git repositories. Perfect UI/UX for the best experience. Enjoy our product!\r\n                            </WelcomeText>\r\n                        </div>\r\n                        <ButtonWrapper>\r\n                            <BlueLinkOutline href={url}>\r\n                                Login with GitHub\r\n                            </BlueLinkOutline>\r\n                        </ButtonWrapper>\r\n                    </InnerDiv>\r\n                </TextWrapper>\r\n            </Wrapper>\r\n            <ViewCodeBlock>\r\n                <ViewCode>\r\n                    <GithubViewLogo/>\r\n                    &nbsp;&nbsp;\r\n                    <ViewCodeLink href={L.REPO} target=\"_blank\">View code</ViewCodeLink>\r\n                </ViewCode>\r\n            </ViewCodeBlock>\r\n\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import styled, { keyframes } from 'styled-components';\r\nimport { Colors } from '../../shared';\r\nimport { GithubOutlined } from '@ant-design/icons/lib';\r\n\r\nconst pulse = keyframes`\r\n\t0% {\r\n\t\ttransform: scale(0.95);\r\n\t}\r\n\r\n\t40% {\r\n\t\ttransform: scale(1);\r\n\t}\r\n\r\n\t100% {\r\n\t\ttransform: scale(0.95);\r\n\t}\r\n`;\r\n\r\nexport const PageWrapper = styled.div`\r\n\tbackground-color: ${Colors.gray_3};\r\n\theight: 100vh;\r\n\tdisplay: flex;\r\n\tjustify-content: center;\r\n\talign-items: center;\r\n`;\r\n\r\nexport const GithubOAuthLoginLogo = styled(GithubOutlined)`\r\n\tfont-size: 30rem;\r\n\tcolor: ${Colors.blue_6};\r\n\tanimation: ${pulse} 2s ease infinite;\r\n`;\r\n\r\nexport const GithubLogoutLogo = styled(GithubOutlined)`\r\n\tfont-size: 30rem;\r\n\tcolor: ${Colors.red_5};\r\n\tanimation: ${pulse} 2s ease infinite;\r\n`;\r\n","export const MENU_NAVIGATION_WIDTH = 260;\r\n\r\nexport enum MenuType {\r\n\tPROFILE = 'Profile',\r\n\tISSUES = 'Issues',\r\n\tPULL_REQUESTS = 'Pull requests',\r\n\tEXPLORE = 'Explore',\r\n\tREPOSITORIES = 'Repositories',\r\n\tLOGOUT = 'Logout',\r\n}\r\n","import React, { FC, useEffect } from 'react';\r\nimport { useHistory } from 'react-router';\r\nimport { AUTH_API_URI, Routes as R } from '../../constants';\r\nimport { GithubOAuthLoginLogo, PageWrapper } from './styles';\r\n\r\n/**\r\n * Long OAuth component.\r\n */\r\nexport const LoginOAuth: FC = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * Receive github code and get token from heroku server.\r\n     * And redirect to home page.\r\n     * @module LoginOAuth\r\n     */\r\n    useEffect(() => {\r\n        const code = window.location.href.match(/\\?code=(.*)/);\r\n        if (code) {\r\n            const newCode = code.pop();\r\n            fetch(`${AUTH_API_URI}${newCode}`)\r\n                .then(response => response.json())\r\n                .then(({token}) => {\r\n                    localStorage.setItem('github_token', token);\r\n                    setTimeout(() => {\r\n                        history.push(R.ROOT);\r\n                    }, 1000)\r\n                });\r\n        }\r\n    }, [history])\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <GithubOAuthLoginLogo/>\r\n        </PageWrapper>\r\n    )\r\n};\r\n","import styled from 'styled-components';\r\nimport { Menu, Typography } from 'antd';\r\n\r\nexport const MenuItem = styled(Menu.Item)`\r\n\tfont-size: 0.9rem;\r\n`;\r\n\r\nexport const Title = styled(Typography.Title)`\r\n\tmargin-top: 1rem;\r\n\tfont-family: 'Poppins', serif;\t\r\n`;\r\n\r\nexport const TitleBlock = styled.div`\r\n\tdisplay: flex;\r\n`;\r\n\r\nexport const AvatarBlock = styled.div`\r\n\tmargin: 2em;\r\n    cursor: pointer;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const StyledDiv = styled.div`\r\n\tdisplay: flex;\r\n`;\r\n\r\nexport const AvatarCell = styled.div`\r\n\tmargin-right: 1rem;\r\n`;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { Avatar } from 'antd';\r\nimport { useQuery } from '@apollo/client';\r\nimport { AvatarCell, StyledDiv } from './styles';\r\nimport { PoppinsText } from '../../shared';\r\nimport { GET_USER_INFO, UserInfoNode } from '../../api/userInfo';\r\n\r\n/**\r\n * User info in navigation menu\r\n */\r\nexport const UserInfo: FC = () => {\r\n\r\n    const {loading, data} = useQuery<UserInfoNode>(GET_USER_INFO);\r\n    const [avatarUrl, setAvatarUrl] = useState<string>('');\r\n    const [name, setName] = useState<string>('Github User');\r\n    const [login, setLogin] = useState<string>('')\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setAvatarUrl(data?.viewer.avatarUrl ?? '');\r\n            setName(data?.viewer.name ?? 'Github User');\r\n            setLogin(data?.viewer.login ?? '');\r\n        }\r\n    }, [loading, data])\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <AvatarCell>\r\n                <Avatar src={avatarUrl} shape=\"circle\" size={46}/>\r\n            </AvatarCell>\r\n            <AvatarCell>\r\n                <PoppinsText>{name}</PoppinsText>\r\n                <br/>\r\n                <PoppinsText type=\"secondary\">{login}</PoppinsText>\r\n            </AvatarCell>\r\n        </StyledDiv>\r\n    )\r\n\r\n}\r\n","import React, { FC } from 'react';\r\nimport { GithubOutlined } from '@ant-design/icons/lib';\r\nimport { Title } from '../NavigationMenu/styles';\r\nimport { Colors } from '../../shared';\r\n\r\nconst iconStyle = {fontSize: '2.5rem', margin: '0.5rem', color: Colors.blue_12};\r\nconst titleStyle = {color: Colors.blue_12};\r\n\r\n/**\r\n * Project title component\r\n */\r\nexport const AppTitle: FC = () => {\r\n    return (\r\n        <>\r\n            <GithubOutlined style={iconStyle}/>\r\n            <Title level={4} style={titleStyle}>Github Web Client</Title>\r\n        </>\r\n    )\r\n}\r\n","import React, { FC, useCallback, useMemo } from 'react';\r\nimport { Layout, Menu } from 'antd';\r\nimport { UserOutlined } from '@ant-design/icons';\r\nimport 'antd/dist/antd.css';\r\nimport {\r\n    //BranchesOutlined,\r\n    DatabaseOutlined,\r\n    LogoutOutlined,\r\n    //QuestionCircleOutlined,\r\n    SearchOutlined\r\n} from '@ant-design/icons/lib';\r\nimport { MENU_NAVIGATION_WIDTH, MenuType } from './types';\r\nimport { Routes as R } from '../../constants';\r\nimport { useHistory } from 'react-router';\r\nimport { AvatarBlock, MenuItem, TitleBlock } from './styles';\r\nimport { UserInfo } from '../UserInfo';\r\nimport { PoppinsSpan } from '../../shared/PoppinsText';\r\nimport { AppTitle } from '../AppTitle';\r\nimport { Colors } from '../../shared';\r\n\r\nconst {Sider} = Layout;\r\n\r\nconst iconStyle = {\r\n    fontSize: '1.3rem'\r\n}\r\n\r\ntype navType = {\r\n    name: React.ReactElement,\r\n    key: MenuType,\r\n    icon: React.ReactNode,\r\n    onClick: () => void;\r\n}\r\n\r\n/**\r\n * Navigation menu component\r\n * Creates menu by uri\r\n */\r\nexport const NavigationMenu: FC = () => {\r\n\r\n    const history = useHistory();\r\n\r\n    const urlName = window.location.pathname.split('/')[1];\r\n\r\n    const handleClick = useCallback((type: MenuType) => {\r\n        let pathName: string = R.ROOT;\r\n        if (type === MenuType.PROFILE) {\r\n            pathName = R.PROFILE;\r\n        }\r\n        if (type === MenuType.ISSUES) {\r\n            pathName = R.ISSUES;\r\n        }\r\n        if (type === MenuType.PULL_REQUESTS) {\r\n            pathName = R.PULL_REQUESTS;\r\n        }\r\n        if (type === MenuType.EXPLORE) {\r\n            pathName = R.EXPLORE;\r\n        }\r\n        if (type === MenuType.REPOSITORIES) {\r\n            pathName = R.REPOSITORIES;\r\n        }\r\n        if (type === MenuType.LOGOUT) {\r\n            pathName = R.LOGOUT\r\n        }\r\n        history.push(pathName);\r\n    }, [history])\r\n\r\n    const navItems: navType[] = useMemo(() =>\r\n        [\r\n            {\r\n                name: <PoppinsSpan>Profile</PoppinsSpan>,\r\n                key: MenuType.PROFILE,\r\n                icon: <UserOutlined style={iconStyle}/>,\r\n                onClick: () => handleClick(MenuType.PROFILE),\r\n            },\r\n            /*{\r\n                name: <PoppinsSpan>Issues</PoppinsSpan>,\r\n                key: MenuType.ISSUES,\r\n                icon: <QuestionCircleOutlined style={iconStyle}/>,\r\n                onClick: () => handleClick(MenuType.ISSUES),\r\n            },\r\n            {\r\n                name: <PoppinsSpan>Pull Requests</PoppinsSpan>,\r\n                key: MenuType.PULL_REQUESTS,\r\n                icon: <BranchesOutlined style={iconStyle}/>,\r\n                onClick: () => handleClick(MenuType.PULL_REQUESTS),\r\n            },*/\r\n            {\r\n                name: <PoppinsSpan>Explore</PoppinsSpan>,\r\n                key: MenuType.EXPLORE,\r\n                icon: <SearchOutlined style={iconStyle}/>,\r\n                onClick: () => handleClick(MenuType.EXPLORE),\r\n            },\r\n            {\r\n                name: <PoppinsSpan>Repositories</PoppinsSpan>,\r\n                key: MenuType.REPOSITORIES,\r\n                icon: <DatabaseOutlined style={iconStyle}/>,\r\n                onClick: () => handleClick(MenuType.REPOSITORIES),\r\n            },\r\n            {\r\n                name: <PoppinsSpan style={{color: Colors.red_5}}>Logout</PoppinsSpan>,\r\n                key: MenuType.LOGOUT,\r\n                icon: <LogoutOutlined style={{...iconStyle, color: Colors.red_5}}/>,\r\n                onClick: () => handleClick(MenuType.LOGOUT),\r\n            },\r\n        ], [handleClick])\r\n\r\n\r\n    const selectedItem = useMemo(\r\n        () => {\r\n            const newUrl = '/' + urlName;\r\n            if (newUrl === R.ROOT || urlName === R.PROFILE) {\r\n                return MenuType.PROFILE;\r\n            }\r\n            /* if (newUrl === R.ISSUES) {\r\n                return MenuType.ISSUES;\r\n            }\r\n            if (newUrl === R.PULL_REQUESTS) {\r\n                return MenuType.PULL_REQUESTS;\r\n            }*/\r\n            if (newUrl === R.REPOSITORIES) {\r\n                return MenuType.REPOSITORIES;\r\n            }\r\n            if (newUrl === R.EXPLORE) {\r\n                return MenuType.EXPLORE;\r\n            }\r\n\r\n            return MenuType.PROFILE;\r\n        }, [urlName]\r\n    );\r\n\r\n    const handleProfileClick = useCallback(() => {\r\n        history.push(R.PROFILE)\r\n    }, [history]);\r\n\r\n    return (\r\n        <Sider width={MENU_NAVIGATION_WIDTH} theme=\"light\">\r\n            <TitleBlock>\r\n                <AppTitle/>\r\n            </TitleBlock>\r\n\r\n            <AvatarBlock onClick={handleProfileClick}>\r\n                <UserInfo/>\r\n            </AvatarBlock>\r\n            <Menu\r\n                mode=\"inline\"\r\n                defaultSelectedKeys={[selectedItem]}\r\n            >\r\n\r\n                {\r\n                    navItems.map(value =>\r\n                        <MenuItem key={value.key} icon={value.icon} onClick={value.onClick}>\r\n                            {value.name}\r\n                        </MenuItem>\r\n                    )\r\n                }\r\n            </Menu>\r\n        </Sider>\r\n\r\n    );\r\n\r\n}\r\n","import { BaseProfileNode, ProfileNode } from '../../api/profile';\r\nimport { UserProfileNode } from '../../api/user';\r\n\r\nexport const baseEmptyProfileInfo: BaseProfileNode = {\r\n    contributionsCollection: {\r\n        contributionCalendar: {\r\n            totalContributions: 0,\r\n            weeks: []\r\n        }\r\n    },\r\n    id: '',\r\n    avatarUrl: '',\r\n    followers: {totalCount: 0},\r\n    following: {totalCount: 0},\r\n    login: '',\r\n    name: '',\r\n    repositories: {\r\n        nodes: [],\r\n    },\r\n    pinnedItems: {nodes: []},\r\n    url: ''\r\n}\r\n\r\nexport const emptyProfileInfo: ProfileNode = {\r\n    viewer: {\r\n        ...baseEmptyProfileInfo\r\n    }\r\n}\r\n\r\nexport const emptyUserProfileInfo: UserProfileNode = {\r\n    user: {\r\n        ...baseEmptyProfileInfo\r\n    }\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ProfileWrapper = styled.div`\r\n    padding: 4rem;\r\n`;\r\n","import styled from 'styled-components';\r\n\r\nexport const InfoBlock = styled.div`\r\n    display: flex;\r\n`;\r\n\r\nexport const ImageInfoBlock = styled.div`\r\n    margin-right: 3rem;\r\n`;\r\n\r\nexport const TextInfoBlock = styled.div`\r\n    \r\n`;\r\n\r\n\r\n","import styled from 'styled-components';\r\nimport { Colors } from '../../shared';\r\nimport { GithubOutlined } from '@ant-design/icons';\r\nimport { Typography } from 'antd';\r\n\r\nexport const InfoWrapper = styled.div`\r\n    \r\n`;\r\n\r\nexport const Name = styled.p`\r\n    font-size: 4rem;\r\n    margin: 0;    \r\n`;\r\n\r\nexport const LoginText = styled.p`\r\n    font-size: 2.5rem;\r\n    color: ${Colors.gray_7};\r\n    margin: 0;   \r\n`;\r\n\r\nexport const FollowingWrapper = styled.div`\r\n    color: ${Colors.blue_6};\r\n`;\r\n\r\nexport const FollowersWrapper = styled.div`\r\n\r\n`;\r\n\r\nexport const GithubLinkLogo = styled(GithubOutlined)`\r\n  color: ${Colors.blue_12};\r\n  font-size: 1.1rem;\r\n`;\r\n\r\nexport const InfoPositionText = styled(Typography.Text)`\r\n  font-size: 1.2rem;\r\n  margin: 0.2rem;\r\n`;\r\n","import React, { FC } from 'react';\r\nimport {\r\n    FollowersWrapper,\r\n    FollowingWrapper,\r\n    GithubLinkLogo,\r\n    InfoPositionText,\r\n    InfoWrapper,\r\n    LoginText,\r\n    Name\r\n} from './styles';\r\nimport { UserOutlined } from '@ant-design/icons/lib';\r\nimport { Col, Row } from 'antd';\r\n\r\n\r\ntype Props = {\r\n    name: string,\r\n    login: string;\r\n    followers: number;\r\n    following: number,\r\n    url: string;\r\n}\r\n\r\n/**\r\n * Component for render profile info text\r\n * @constructor\r\n */\r\nexport const ProfileInfoText: FC<Props> = ({name, login, followers, following, url}) => {\r\n\r\n    return (\r\n        <InfoWrapper>\r\n            <Name>{name}</Name>\r\n            <LoginText>{login}</LoginText>\r\n            <Row>\r\n                <Col span={12}>\r\n                    <FollowersWrapper>\r\n                        <UserOutlined/>\r\n                        <InfoPositionText>{followers} Followers </InfoPositionText>\r\n                    </FollowersWrapper>\r\n                    <div>\r\n                        <GithubLinkLogo/>\r\n                        <InfoPositionText><a href={url}>Github</a></InfoPositionText>\r\n                    </div>\r\n                </Col>\r\n                <Col>\r\n                    <FollowingWrapper>\r\n                        <UserOutlined/>\r\n                        <InfoPositionText>{following} Following</InfoPositionText>\r\n                    </FollowingWrapper>\r\n                </Col>\r\n            </Row>\r\n\r\n        </InfoWrapper>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { BaseProfileNode } from '../../api/profile';\r\nimport { ImageInfoBlock, InfoBlock, TextInfoBlock } from './styles';\r\nimport { Avatar } from 'antd';\r\nimport { ProfileInfoText } from '../ProfileInfoText';\r\n\r\ntype Props = {\r\n    data: BaseProfileNode;\r\n}\r\n\r\n/**\r\n * ProfilePage info component\r\n */\r\nexport const ProfileInfo: FC<Props> = ({data}) => {\r\n\r\n    return (\r\n        <InfoBlock>\r\n            <ImageInfoBlock>\r\n                <Avatar src={data.avatarUrl} shape=\"circle\" size={256}/>\r\n            </ImageInfoBlock>\r\n            <TextInfoBlock>\r\n                <ProfileInfoText\r\n                    name={data.name}\r\n                    login={data.login}\r\n                    followers={data.followers.totalCount}\r\n                    following={data.following.totalCount}\r\n                    url={data.url}\r\n                />\r\n            </TextInfoBlock>\r\n        </InfoBlock>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\n\r\n\r\nexport const PinnedItemsWrapper = styled.div`\r\n\r\n`;\r\n","import styled from 'styled-components';\r\nimport { StarFilled, StarOutlined } from '@ant-design/icons';\r\nimport { Colors } from '../../shared';\r\n\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-top: 1.2rem;\r\n    margin-right: 2rem;    \r\n`;\r\n\r\nexport const StyledStarFilled = styled(StarFilled)`\r\n    color: ${Colors.orange_4};\r\n    cursor: pointer;\r\n    font-size: 1.2rem;\r\n`;\r\n\r\nexport const StyledStarOutlined = styled(StarOutlined)`\r\n    color: ${Colors.orange_4};\r\n    cursor: pointer;\r\n    font-size: 1.2rem;\r\n`\r\n","import React, { FC, useCallback, useEffect, useMemo, useState } from 'react';\r\nimport Text from 'antd/es/typography/Text';\r\nimport { StyledStarFilled, StyledStarOutlined, Wrapper } from './styles';\r\nimport { useMutation } from '@apollo/client';\r\nimport { ADD_STARR_QUERY, REMOVE_STARR_QUERY, RemoveStarResponse } from '../../api/starRepository';\r\nimport { AddStarResponse } from '../../api/starRepository';\r\nimport { message } from 'antd';\r\nimport { Errors } from '../../constants';\r\n\r\ninterface RepositoryStarProps {\r\n    count: number,\r\n    hasStarred: boolean,\r\n    id: string,\r\n}\r\n\r\n/**\r\n * Render and update repository star\r\n */\r\nexport const RepositoryStar: FC<RepositoryStarProps> = ({ count, hasStarred, id }) => {\r\n    const emptyData: AddStarResponse = useMemo(() => {\r\n        return {\r\n            addStar: {\r\n                starrable: {\r\n                    stargazerCount: count,\r\n                    viewerHasStarred: hasStarred\r\n                }\r\n            }\r\n        }\r\n    }, [count, hasStarred]);\r\n    const [countStars, setCountStars] = useState<number>(count)\r\n    const [starred, setStarred] = useState<boolean>(hasStarred);\r\n    const [addStar] = useMutation<AddStarResponse>(ADD_STARR_QUERY);\r\n    const [removeStar] = useMutation(REMOVE_STARR_QUERY);\r\n\r\n    useEffect(() => {\r\n        setCountStars(count);\r\n    }, [count]);\r\n\r\n    /**\r\n     * Add star function\r\n     */\r\n    const handleAddStar = useCallback((event: React.MouseEvent<HTMLElement>) => {\r\n        event.stopPropagation()\r\n        addStar({ variables: { id } }).then(value => {\r\n            const data: AddStarResponse = value.data ?? emptyData;\r\n            setCountStars(data.addStar.starrable.stargazerCount);\r\n            setStarred(data.addStar.starrable.viewerHasStarred);\r\n        }).catch(() => message.error(Errors.ACCESS_RESTRICTED, 7));\r\n    }, [id, setCountStars, setStarred, addStar, emptyData]);\r\n\r\n    /**\r\n     * Remove star function\r\n     */\r\n    const handleRemoveStar = useCallback((event: React.MouseEvent<HTMLElement>) => {\r\n        event.stopPropagation()\r\n        removeStar({ variables: { id } }).then(value => {\r\n            const data: RemoveStarResponse = value.data ?? emptyData;\r\n            setCountStars(data.removeStar.starrable.stargazerCount);\r\n            setStarred(data.removeStar.starrable.viewerHasStarred);\r\n        }).catch(() => message.error(Errors.ACCESS_RESTRICTED, 7));\r\n    }, [id, removeStar, emptyData])\r\n\r\n    return (\r\n        <Wrapper>\r\n            {starred ? <StyledStarFilled onClick={handleRemoveStar}/> :\r\n                <StyledStarOutlined onClick={handleAddStar}/>}\r\n            <Text> {countStars}</Text>\r\n        </Wrapper>\r\n    )\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Language } from '../RepositoryCard/types';\r\nimport { Tag } from 'antd';\r\n\r\ninterface RepositoryLanguageProps {\r\n    languages: Language[],\r\n\r\n}\r\n/**\r\n * RepositoryPage Language List component\r\n */\r\nexport const RepositoryLanguage: FC<RepositoryLanguageProps> = ({languages}) => {\r\n\r\n    return (\r\n        <>\r\n            {languages.map(value => <Tag  key={value.color + new Date()} style={{margin: '0.2rem'}} color={value.color}>{value.name}</Tag>)}\r\n        </>\r\n    )\r\n}\r\n","export function makeNullStringToEmptyString(value: string | null): string {\r\n    return value ? value : '';\r\n}\r\n","const months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];\r\n\r\n/**\r\n * Format date\r\n */\r\nexport function formatDate(value: string): string {\r\n    const date = new Date(Date.parse(value));\r\n    const formatted_date = date.getDate() + '-' + months[date.getMonth()] + '-' + date.getFullYear();\r\n    return formatted_date;\r\n}\r\n","import React, { FC, useCallback } from 'react';\r\nimport { Language } from './types';\r\nimport { RepositoryPreviewCard } from '../../shared';\r\nimport { RepositoryStar } from '../RepositoryStar';\r\nimport { RepositoryLanguage } from '../RepositoryLanguage';\r\nimport { Typography } from 'antd';\r\nimport { useHistory } from 'react-router';\r\nimport { formatDate } from '../../helpers';\r\n\r\nconst {Text} = Typography;\r\n\r\ninterface RepositoryCardProps {\r\n    name: string;\r\n    nameWithOwner: string;\r\n    owner: string;\r\n    description: string;\r\n    pushedAt: string;\r\n    stargazerCount: number;\r\n    languages: Language[];\r\n    hasStarred: boolean;\r\n    id: string;\r\n}\r\n\r\n/**\r\n * Search repository card\r\n */\r\nexport const RepositoryCard: FC<RepositoryCardProps> =\r\n    ({\r\n         name,\r\n         nameWithOwner,\r\n         owner,\r\n         description,\r\n         pushedAt,\r\n         stargazerCount,\r\n         languages,\r\n         hasStarred,\r\n         id\r\n     }) => {\r\n\r\n        const formatted_date = formatDate(pushedAt);\r\n        const history = useHistory()\r\n        const handleClick = useCallback(() => { history.push(`/repository/${owner}/${name}`) }, [history, owner, name])\r\n        return (\r\n            <RepositoryPreviewCard title={nameWithOwner} onClick={handleClick}>\r\n                {description ? (<>{description} <br/><br/></>) : null}\r\n                <Text>Updated: {formatted_date}</Text>\r\n                <RepositoryStar count={stargazerCount} hasStarred={hasStarred} id={id}/>\r\n                <RepositoryLanguage languages={languages}/>\r\n            </RepositoryPreviewCard>\r\n        );\r\n    }\r\n","import React, { FC, useCallback } from 'react';\r\nimport { Language } from './types';\r\nimport { RepositoryPreviewCard } from '../../shared';\r\nimport { RepositoryLanguage } from '../RepositoryLanguage';\r\nimport { useHistory } from 'react-router';\r\n\r\ninterface RepositoryCardProps {\r\n    name: string;\r\n    nameWithOwner: string;\r\n    owner: string;\r\n    description: string;\r\n    pushedAt: string;\r\n    stargazerCount: number;\r\n    languages: Language[];\r\n    hasStarred: boolean;\r\n    id: string;\r\n}\r\n\r\n/**\r\n * Single Pinned RepositoryPage Card component\r\n * @see RepositoryPreviewCard\r\n * @see RepositoryLanguage\r\n */\r\nexport const PinnedRepositoryCard: FC<RepositoryCardProps> = ({name, languages, owner, nameWithOwner}) => {\r\n    const history = useHistory()\r\n    const handleClick = useCallback(() => { history.push(`/repository/${owner}/${name}`) }, [history, owner, name])\r\n    return (\r\n        <RepositoryPreviewCard title={nameWithOwner} onClick={handleClick}>\r\n            <RepositoryLanguage languages={languages}/>\r\n        </RepositoryPreviewCard>\r\n    );\r\n}\r\n","import { RepositoryNode } from '../../api/search';\r\nimport { RepositoryCard } from './RepositoryCard';\r\nimport React from 'react';\r\nimport { PinnedRepositoryCard } from './PinnedRepositoryCard';\r\n\r\n/**\r\n * Renderers for RepositoryPage Card\r\n */\r\nexport const renderRepositoryCard = (item: RepositoryNode) => (\r\n    <RepositoryCard\r\n        key={item.id + new Date()}\r\n        name={item.name}\r\n        nameWithOwner={item.nameWithOwner}\r\n        owner={item.owner.login}\r\n        description={item.description}\r\n        pushedAt={item.pushedAt}\r\n        languages={item.languages.nodes}\r\n        stargazerCount={item.stargazerCount}\r\n        hasStarred={item.viewerHasStarred}\r\n        id={item.id}\r\n    />\r\n);\r\n\r\nexport const renderPinnedRepositoryCard = (item: RepositoryNode) => (\r\n    <PinnedRepositoryCard\r\n        key={item.id + new Date()}\r\n        name={item.name}\r\n        nameWithOwner={item.nameWithOwner}\r\n        owner={item.owner.login}\r\n        description={item.description}\r\n        pushedAt={item.pushedAt}\r\n        languages={item.languages.nodes}\r\n        stargazerCount={item.stargazerCount}\r\n        hasStarred={item.viewerHasStarred}\r\n        id={item.id}\r\n    />\r\n);\r\n","import React, { FC } from 'react';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { List } from 'antd';\r\nimport { renderPinnedRepositoryCard, renderRepositoryCard } from '../RepositoryCard/renders';\r\n\r\nexport type RepositoryListProps = {\r\n    data: RepositoryNode[];\r\n    loading: boolean;\r\n    pageSize?: number;\r\n    pinnedCard?: boolean;\r\n}\r\n\r\n/**\r\n * List of RepositoriesPage\r\n * @see List\r\n */\r\nexport const RepositoryList: FC<RepositoryListProps> = ({data, loading, pageSize = 4, pinnedCard= false}) => {\r\n\r\n    return (\r\n        <List\r\n            loading={loading}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={data}\r\n            renderItem={pinnedCard ? renderPinnedRepositoryCard : renderRepositoryCard}\r\n            pagination={pinnedCard ? false :{pageSize}}\r\n        />\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { PinnedItemsWrapper } from './styles';\r\nimport { RepositoryList } from '../RepositoryList';\r\n\r\ntype PinnedItemsProps = {\r\n    pinnedItems: RepositoryNode[];\r\n    loading: boolean;\r\n}\r\n\r\n/**\r\n * Pinned RepositoriesPage in UserProfile/ProfilePage pages\r\n */\r\nexport const PinnedItems: FC<PinnedItemsProps> = ({pinnedItems, loading}) => {\r\n\r\n    return (\r\n        <PinnedItemsWrapper>\r\n            <h3>Pinned Repositories</h3>\r\n            <RepositoryList data={pinnedItems} loading={loading} pinnedCard={true}/>\r\n        </PinnedItemsWrapper>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\n\r\nexport const ContributionCalendarWrapper = styled.div`\r\n  margin: 2rem 1rem;\r\n  width: 100%;\r\n`;\r\n","export enum SearchTypes {\r\n    REPOSITORY = 'REPOSITORY',\r\n    USER = 'USER',\r\n}\r\n","import React, { ReactElement } from 'react';\r\nimport dayjs from 'dayjs';\r\nimport Measure, { BoundingRect } from 'react-measure';\r\n\r\ninterface Props {\r\n    weekNames: string[]\r\n    monthNames: string[]\r\n    panelColors: string[]\r\n    values: { [date: string]: number }\r\n    until: string\r\n    dateFormat: string\r\n}\r\n\r\ninterface State {\r\n    columns: number\r\n    maxWidth: number\r\n}\r\n\r\n/**\r\n * GitHub ContributionCalendar\r\n * Code from https://github.com/haripo/react-github-contribution-calendar\r\n * Inconvenient package. No possibility to change cell size.\r\n */\r\nexport default class GitHubCalendar extends React.Component<Props, State> {\r\n    monthLabelHeight: number;\r\n    weekLabelWidth: number;\r\n    panelSize: number;\r\n    panelMargin: number;\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\n\r\n        this.monthLabelHeight = 15;\r\n        this.weekLabelWidth = 15;\r\n        this.panelSize = 15;\r\n        this.panelMargin = 2;\r\n\r\n        this.state = {\r\n            columns: 53,\r\n            maxWidth: 53\r\n        }\r\n    }\r\n\r\n    getPanelPosition(row: number, col: number) {\r\n        const bounds = this.panelSize + this.panelMargin;\r\n        return {\r\n            x: this.weekLabelWidth + bounds * row,\r\n            y: this.monthLabelHeight + bounds * col\r\n        };\r\n    }\r\n\r\n    makeCalendarData(history: { [k: string]: number }, lastDay: string, columns: number) {\r\n        const d = dayjs(lastDay, { format: this.props.dateFormat });\r\n        const lastWeekend = d.endOf('week');\r\n        const endDate = d.endOf('day');\r\n\r\n        let result: ({ value: number, month: number } | null)[][] = [];\r\n        for (let i = 0; i < columns; i++) {\r\n            result[i] = [];\r\n            for (let j = 0; j < 7; j++) {\r\n                let date = lastWeekend.subtract((columns - i - 1) * 7 + (6 - j), 'day');\r\n                if (date <= endDate) {\r\n                    result[i][j] = {\r\n                        value: history[date.format(this.props.dateFormat)] || 0,\r\n                        month: date.month()\r\n                    };\r\n                } else {\r\n                    result[i][j] = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    render() {\r\n        const columns = this.state.columns;\r\n        const values = this.props.values;\r\n        const until = this.props.until;\r\n\r\n        let contributions = this.makeCalendarData(values, until, columns);\r\n        let innerDom: ReactElement[] = [];\r\n\r\n        // panels\r\n        for (let i = 0; i < columns; i++) {\r\n            for (let j = 0; j < 7; j++) {\r\n                let contribution = contributions[i][j];\r\n                if (contribution === null) continue;\r\n                const pos = this.getPanelPosition(i, j);\r\n                const color = contribution.value >= this.props.panelColors.length ?\r\n                    this.props.panelColors[this.props.panelColors.length-1] :\r\n                    this.props.panelColors[contribution.value] ;\r\n                const dom = (\r\n                    <rect\r\n                        key={ 'panel_key_' + i + '_' + j }\r\n                        x={ pos.x }\r\n                        y={ pos.y }\r\n                        width={ this.panelSize }\r\n                        height={ this.panelSize }\r\n                        fill={ color }\r\n                    />\r\n                );\r\n                innerDom.push(dom);\r\n            }\r\n        }\r\n\r\n        // week texts\r\n        for (let i = 0; i < this.props.weekNames.length; i++) {\r\n            const textBasePos = this.getPanelPosition(0, i);\r\n            const dom = (\r\n                <text\r\n                    key={ 'week_key_' + i }\r\n                    style={ {\r\n                        fontSize: 9,\r\n                        alignmentBaseline: 'central',\r\n                        fill: '#AAA'\r\n                    } }\r\n                    x={ textBasePos.x - this.panelSize / 2 - 2 }\r\n                    y={ textBasePos.y + this.panelSize / 2 }\r\n                    textAnchor={ 'middle' }>\r\n                    { this.props.weekNames[i] }\r\n                </text>\r\n            );\r\n            innerDom.push(dom);\r\n        }\r\n\r\n        // month texts\r\n        let prevMonth = 0;\r\n        for (let i = 0; i < columns; i++) {\r\n            const c = contributions[i][0];\r\n            if (c === null) continue;\r\n            if (c.month !== prevMonth) {\r\n                let textBasePos = this.getPanelPosition(i, 0);\r\n                innerDom.push(<text\r\n                        key={ 'month_key_' + i }\r\n                        style={ {\r\n                            fontSize: 10,\r\n                            alignmentBaseline: 'central',\r\n                            fill: '#aaaaaa'\r\n                        } }\r\n                        x={ textBasePos.x + this.panelSize / 2 }\r\n                        y={ textBasePos.y - this.panelSize / 2 }\r\n                        textAnchor={ 'middle' }>\r\n                        { this.props.monthNames[c.month] }\r\n                    </text>\r\n                );\r\n            }\r\n            prevMonth = c.month;\r\n        }\r\n\r\n        return (\r\n            <Measure bounds onResize={ (rect) => this.updateSize(rect.bounds) }>\r\n                { ({ measureRef }: any) => (\r\n                    <div ref={ measureRef } style={ { width: \"100%\" } }>\r\n                        <svg\r\n                            style={ {\r\n                                fontFamily: 'Helvetica, arial, nimbussansl, liberationsans, freesans, clean, sans-serif',\r\n                                width: '100%'\r\n                            } }\r\n                            height={this.panelSize * 10}>\r\n                            { innerDom }\r\n                        </svg>\r\n                    </div>\r\n                ) }\r\n            </Measure>\r\n        );\r\n    }\r\n\r\n    updateSize(size?: BoundingRect) {\r\n        if (!size) return;\r\n\r\n        const visibleWeeks = Math.floor((size.width - this.weekLabelWidth) / 13);\r\n        this.setState({\r\n            columns: Math.min(visibleWeeks, this.state.maxWidth)\r\n        });\r\n    }\r\n};\r\n","import React, { FC, useCallback, useEffect, useState } from 'react';\r\nimport GitHubCalendar from './Calendar';\r\n\r\nimport {\r\n    ContributionCalendarConnNode,\r\n    ContributionDaysNode,\r\n} from '../../api/calendar';\r\n\r\nimport { Colors } from '../../shared';\r\n\r\ntype Props = {\r\n    login: string;\r\n    calendarData: ContributionCalendarConnNode;\r\n}\r\n\r\n/**\r\n * Component creates Contribution Calendar by ContributionCalendarConnNode\r\n * @see ContributionCalendarConnNode:\r\n */\r\nexport const ContributionCalendar: FC<Props> = ({calendarData}) => {\r\n    /**\r\n     * State\r\n     */\r\n    const [calendarDays, setCalendarDays] = useState<{ [date: string]: number }>({})\r\n\r\n\r\n    /**\r\n     * Convent data to required format\r\n     */\r\n    const conventData = useCallback((weekDay: ContributionDaysNode) => {\r\n        //date format 2019-12-22T00:00:00.000+00:00\r\n        const newDate = weekDay.date.split('T')[0];\r\n        const count = weekDay.contributionCount;\r\n        return [newDate, count];\r\n    }, []);\r\n\r\n    /**\r\n     * Change data for the calendar\r\n     */\r\n    useEffect(() => {\r\n        const newCalendarData: { [date: string]: number } = {};\r\n        calendarData?.weeks.forEach((weekDay) => {\r\n            weekDay.contributionDays.forEach((day) => {\r\n                const newDay = conventData(day);\r\n                const formattedDay = newDay[0].toString();\r\n                newCalendarData[formattedDay] = +newDay[1];\r\n            })\r\n        })\r\n        setCalendarDays(newCalendarData);\r\n    }, [calendarData, conventData])\r\n\r\n\r\n    const date = new Date();\r\n    const until = date.getFullYear() + '-' + (date.getMonth() + 1) + '-' + date.getDate();\r\n\r\n    /**\r\n     * Calendar colors\r\n     */\r\n    const panelColors = [\r\n        Colors.gray_4,\r\n        Colors.blue_2,\r\n        Colors.blue_3,\r\n        Colors.blue_4,\r\n        Colors.blue_5,\r\n        Colors.blue_6,\r\n        Colors.blue_7,\r\n        Colors.blue_8,\r\n    ];\r\n\r\n    /**\r\n     * Calendar weeks and months\r\n     */\r\n    const weekNames =  ['', 'M', '', 'W', '', 'F', ''];\r\n    const monthNames = [\r\n        'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',\r\n        'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'\r\n    ];\r\n\r\n\r\n    return (\r\n        <GitHubCalendar\r\n            values={calendarDays} until={until}\r\n            weekNames={weekNames} monthNames={monthNames} dateFormat=\"YYYY-MM-DD\" panelColors={panelColors}/>\r\n    );\r\n\r\n}\r\n","import React, { FC, useCallback } from 'react';\r\nimport { ProfileWrapper } from '../Profile/styles';\r\nimport { Col, Row } from 'antd';\r\nimport { ProfileInfo } from '../ProfileInfo';\r\nimport { PinnedItems } from '../PinnedItems';\r\nimport { BaseProfileNode } from '../../api/profile';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { ContributionCalendarWrapper } from './styles';\r\nimport { ContributionCalendar } from '../Calendar';\r\nimport { useHistory } from 'react-router';\r\nimport { Typography } from 'antd';\r\nconst { Link } = Typography;\r\n\r\ntype BaseUserProfileProps = {\r\n    user: BaseProfileNode;\r\n    loading: boolean;\r\n    pinnedItems: RepositoryNode[];\r\n}\r\n\r\n/**\r\n * Component for rendering user profile\r\n */\r\nexport const BaseUserProfile: FC<BaseUserProfileProps> = ({user, pinnedItems, loading}) => {\r\n    const history = useHistory();\r\n    const handleClick = useCallback(() => {\r\n        history.push(`/repositories/${user.login}`);\r\n    }, [history, user])\r\n\r\n    return (\r\n        <ProfileWrapper>\r\n            <Row justify=\"start\">\r\n                <Col span={16}>\r\n                    <Row>\r\n                        <ProfileInfo data={user}/>\r\n                    </Row>\r\n                    <Row>\r\n                        <ContributionCalendarWrapper>\r\n                            <h2>Contribution Calendar</h2>\r\n                            <ContributionCalendar login={user.login} calendarData={user.contributionsCollection.contributionCalendar}/>\r\n                            <Link onClick={handleClick}>\r\n                                <h3 style={{fontWeight: 'lighter'}}>See all repositories</h3>\r\n                            </Link>\r\n                        </ContributionCalendarWrapper>\r\n                    </Row>\r\n                </Col>\r\n                <Col span={8}>\r\n                    <Row>\r\n                        <PinnedItems pinnedItems={pinnedItems} loading={loading}/>\r\n                    </Row>\r\n                </Col>\r\n            </Row>\r\n        </ProfileWrapper>\r\n    );\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_PROFILE_QUERY, ProfileNode } from '../../api/profile';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { emptyProfileInfo } from './types';\r\nimport { BaseUserProfile } from '../UserProfile/BaseUserProfile';\r\n\r\ntype Props = {}\r\n\r\n/**\r\n * User profile component\r\n */\r\nexport const Profile: FC<Props> = () => {\r\n\r\n    const pinnedItemAmount = 4;\r\n\r\n    /**\r\n     * State\r\n     */\r\n    const [profileInfo, setProfileInfo] = useState<ProfileNode>(emptyProfileInfo);\r\n    const [pinnedItems, setPinnedItems] = useState<RepositoryNode[]>([]);\r\n\r\n    /**\r\n     * Get data from server\r\n     */\r\n    const {loading, data} = useQuery<ProfileNode>(GET_PROFILE_QUERY, {\r\n        variables: {\r\n            count: pinnedItemAmount\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Update data\r\n     */\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setProfileInfo(data ?? emptyProfileInfo);\r\n            setPinnedItems(data?.viewer?.pinnedItems?.nodes ?? [])\r\n        }\r\n    }, [loading, data])\r\n\r\n    return (\r\n        <BaseUserProfile user={profileInfo.viewer} loading={loading} pinnedItems={pinnedItems}/>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Layout } from 'antd';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { Profile } from '../../components/Profile';\r\n\r\n\r\n/**\r\n * Own profile component\r\n */\r\nexport const ProfilePage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <Profile />\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Redirect, Route } from 'react-router';\r\nimport { Routes as R } from '../../constants'\r\nimport isNil from 'lodash.isnil';\r\n\r\ntype PrivateRouteProps = {\r\n    path: string | string[],\r\n    exact?: boolean,\r\n    component: any;\r\n}\r\n/**\r\n * Wrapper for Route\r\n * Allows use Route only for authenticated users\r\n */\r\nexport const PrivateRoute: FC<PrivateRouteProps> = ({...params}) => {\r\n    const userToken = localStorage.getItem('github_token');\r\n    return !isNil(userToken) ? <Route {...params} /> : <Redirect to={R.LOGIN}/>\r\n}\r\n","import { ApolloClient, ApolloLink, HttpLink, InMemoryCache } from '@apollo/client';\r\nimport { Routes as R } from '../constants';\r\n\r\nconst httpLink = new HttpLink({uri: R.API});\r\n\r\n/**\r\n * Add github token to Apollo Client\r\n */\r\nconst authLink = new ApolloLink((operation, forward) => {\r\n    // Retrieve the authorization token from local storage.\r\n    const token = localStorage.getItem('github_token');\r\n\r\n    // Use the setContext method to set the HTTP headers.\r\n    operation.setContext({\r\n        headers: {\r\n            authorization: token ? `Bearer ${token}` : ''\r\n        }\r\n    });\r\n\r\n    // Call the next link in the middleware chain.\r\n    return forward(operation);\r\n});\r\n\r\n/**\r\n * Apollo Client fo API calls\r\n */\r\nexport const client = new ApolloClient({\r\n    link: authLink.concat(httpLink), // Chain it with the HttpLink\r\n    cache: new InMemoryCache()\r\n});\r\n","import React, { FC, useEffect } from 'react';\r\nimport { GithubLogoutLogo, PageWrapper } from '../LoginOAuth/styles';\r\nimport { useHistory } from 'react-router';\r\nimport { Routes as R } from '../../constants';\r\n\r\n/**\r\n * Logout component\r\n */\r\nexport const Logout: FC = () => {\r\n    const history = useHistory();\r\n\r\n    /**\r\n     * Remove token from localStorage\r\n     */\r\n    useEffect(() => {\r\n        localStorage.removeItem('github_token');\r\n        setTimeout(() => {\r\n            history.push(R.LOGIN);\r\n        }, 2000)\r\n    }, [history]);\r\n\r\n    return (\r\n        <PageWrapper>\r\n            <GithubLogoutLogo/>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Layout } from 'antd';\r\n\r\n/**\r\n * Component for users Issues\r\n */\r\nexport const Issues: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        Issues\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Layout } from 'antd';\r\n\r\n/**\r\n* Component for users Pull Requests\r\n*/\r\nexport const PullRequestsPage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        Pull Requests\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC, useCallback, useMemo } from 'react';\r\nimport { Input, Select } from 'antd';\r\nimport { useHistory } from 'react-router';\r\nimport { Routes as R } from '../../constants';\r\nimport { SearchTypes } from './types';\r\n\r\nconst {Search} = Input;\r\nconst {Option} = Select;\r\n\r\ninterface GlobalSearchProps {\r\n    setSearchValue: (value: string) => void;\r\n    setSearchType: (type: SearchTypes) => void;\r\n}\r\n\r\n/**\r\n * Search component\r\n */\r\nexport const GlobalSearch: FC<GlobalSearchProps> = ({setSearchValue, setSearchType}) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const onChangeSearchType = useCallback((value: SearchTypes) => {\r\n        setSearchType(value);\r\n    }, [setSearchType])\r\n\r\n    /**\r\n     * Search type\r\n     * SearchTypes.REPOSITORY or SearchTypes.USER\r\n     * @see SearchTypes\r\n     */\r\n    const selectSearchItem = useMemo(() => (\r\n        <Select defaultValue={SearchTypes.REPOSITORY} className=\"select-before\" style={{width: 150}}\r\n                onChange={onChangeSearchType}>\r\n            <Option value={SearchTypes.REPOSITORY}>{SearchTypes.REPOSITORY}</Option>\r\n            <Option value={SearchTypes.USER}>{SearchTypes.USER}</Option>\r\n        </Select>\r\n    ), [onChangeSearchType]);\r\n\r\n    const onSearch = useCallback((value) => {\r\n        setSearchValue(value);\r\n        history.push(R.EXPLORE);\r\n    }, [history, setSearchValue]);\r\n\r\n    const onClick = useCallback(() => {\r\n        //history.push(R.EXPLORE);\r\n    }, []);\r\n\r\n    return (\r\n        <Search autoFocus style={{width: '50%'}} addonBefore={selectSearchItem} placeholder=\"Global search\" size=\"large\" onSearch={onSearch}\r\n                onClick={onClick} allowClear/>\r\n    );\r\n}\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_SEARCH_QUERY = gql`\r\nquery ($count: Int!, $type: SearchType!, $query: String!) {\r\n  search(first: $count, type: $type, query: $query) {\r\n    nodes {\r\n      ... on Repository {\r\n        id\r\n        name\r\n        nameWithOwner\r\n        owner {\r\n          login\r\n        }\r\n        url\r\n        description\r\n        pushedAt\r\n        stargazerCount\r\n        languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n          nodes {\r\n            name\r\n            color\r\n          }\r\n          totalCount\r\n        }\r\n        viewerHasStarred\r\n      }\r\n      ... on User {\r\n        login,\r\n        url,\r\n        avatarUrl,\r\n        name,\r\n        email,\r\n        bio,\r\n        followers {\r\n          totalCount\r\n        },\r\n        following {\r\n          totalCount\r\n        }\r\n        repositories {\r\n          totalCount\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport default GET_SEARCH_QUERY;\r\n","export interface RepositorySearchInfo {\r\n    search: {\r\n        nodes: RepositoryNode[],\r\n    }\r\n}\r\n\r\nexport interface RepositoryNode {\r\n    id: string,\r\n    name: string;\r\n    nameWithOwner: string,\r\n    owner: {\r\n        login: string,\r\n    },\r\n    url: string,\r\n    description: string,\r\n    pushedAt: string,\r\n    stargazerCount: number,\r\n    languages: {\r\n        nodes: [{\r\n            name: string,\r\n            color: string,\r\n        }],\r\n        totalCount: number\r\n    },\r\n    totalCount: number,\r\n    viewerHasStarred: boolean,\r\n}\r\n\r\nexport interface UserSearchInfo {\r\n    search: {\r\n        nodes: UserNode[],\r\n    }\r\n}\r\n\r\nexport interface UserNode {\r\n    login: string,\r\n    url: string,\r\n    name: string,\r\n    email: string,\r\n    avatarUrl: string,\r\n    bio: string,\r\n    followers: {\r\n        totalCount: number,\r\n    },\r\n    following: {\r\n        totalCount: number,\r\n    },\r\n    repositories: {\r\n        totalCount: number,\r\n    }\r\n    __typename: TypeName;\r\n}\r\n\r\nexport enum TypeName {\r\n    USER = 'User',\r\n    ORGANIZATION = 'Organization',\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { RepositoryList } from '../RepositoryList';\r\nimport { SearchVariables } from '../Search/components/types';\r\nimport { useQuery } from '@apollo/client';\r\nimport GET_SEARCH_QUERY from '../../api/search/queries';\r\nimport { RepositoryNode, RepositorySearchInfo } from '../../api/search';\r\n\r\ntype RepositorySearchPageProps = {\r\n    searchVariables: SearchVariables;\r\n}\r\n\r\n/**\r\n * RepositoryPage search result list\r\n */\r\nexport const SearchRepositoriesList: FC<RepositorySearchPageProps> = ({searchVariables}) => {\r\n\r\n    const [repositoryResult, setRepositoryResult] = useState<RepositoryNode[]>([])\r\n\r\n    /**\r\n     * Get data from server\r\n     */\r\n    const {loading, data} = useQuery<RepositorySearchInfo>(GET_SEARCH_QUERY, {\r\n        variables: {...searchVariables}\r\n    })\r\n\r\n    /**\r\n     * Update data\r\n     */\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setRepositoryResult(data?.search.nodes ?? []);\r\n        }\r\n    }, [loading, data]);\r\n\r\n\r\n    return (\r\n        <RepositoryList data={repositoryResult} loading={loading}/>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Card, List } from 'antd';\r\n\r\nexport const ListItem = styled(List.Item)`\r\n`;\r\n\r\nexport const StyledCard = styled(Card)`\r\n    .ant-card-body {\r\n        padding: 16px;\r\n    }\r\n    margin-top: 1rem;\r\n    cursor: pointer;\r\n`;\r\n","import React, { FC, useCallback, useMemo } from 'react';\r\nimport { UserNode } from '../../api/search';\r\nimport { Avatar, List, Typography } from 'antd';\r\nimport { Colors, IconText } from '../../shared';\r\nimport { DatabaseOutlined, UserOutlined } from '@ant-design/icons/lib';\r\nimport { ListItem, StyledCard } from './styles';\r\nimport { makeNullStringToEmptyString } from '../../helpers';\r\nimport { useHistory } from 'react-router';\r\n\r\nconst {Text} = Typography;\r\n\r\n/**\r\n * Search user card\r\n */\r\nexport const UserCard: FC<UserNode> = (\r\n    {\r\n        name,\r\n        login,\r\n        avatarUrl,\r\n        bio,\r\n        email,\r\n        followers,\r\n        following,\r\n        repositories\r\n    }) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const actions = useMemo(() => [\r\n        <IconText icon={<UserOutlined style={{color: Colors.blue_6}}/>}\r\n                  text={makeNullStringToEmptyString(followers?.totalCount?.toString())}/>,\r\n        <IconText icon={<UserOutlined/>}\r\n                  text={makeNullStringToEmptyString(following?.totalCount?.toString())}/>,\r\n        <IconText icon={<DatabaseOutlined/>}\r\n                  text={makeNullStringToEmptyString(repositories?.totalCount?.toString())}/>\r\n    ], [following, followers, repositories]);\r\n\r\n    const handleClick = useCallback(() => {\r\n        history.push(`/users/${login}`);\r\n    }, [history, login]);\r\n\r\n    return (\r\n        <StyledCard onClick={handleClick}>\r\n            <ListItem\r\n                key={login}\r\n                actions={[...actions]}\r\n            >\r\n                <List.Item.Meta\r\n                    avatar={<Avatar src={avatarUrl}/>}\r\n                    title={<Text>{login}</Text>}\r\n                    description={email ?? ''}\r\n                />\r\n                <br/>\r\n                {name}\r\n                <br/>\r\n                {bio}\r\n            </ListItem>\r\n        </StyledCard>\r\n    );\r\n}\r\n","import { UserNode } from '../../api/search';\r\nimport React from 'react';\r\nimport { UserCard } from './UserCard';\r\n\r\n\r\nexport const renderUserCard = (item: UserNode) => (\r\n    <UserCard {...item}/>\r\n)\r\n","import React, { FC } from 'react';\r\nimport { UserNode } from '../../api/search';\r\nimport { List } from 'antd';\r\nimport { renderUserCard } from '../UserCard/renders';\r\n\r\nexport type UserListProps = {\r\n    data: UserNode[];\r\n    loading: boolean;\r\n    pageSize?: number;\r\n}\r\n\r\n/**\r\n * List of Users\r\n * @see List\r\n */\r\nexport const UserList: FC<UserListProps> = ({data, loading, pageSize = 8}) => {\r\n\r\n    return (\r\n        <List\r\n            style={{width: '50%'}}\r\n            loading={loading}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={data}\r\n            renderItem={renderUserCard}\r\n            pagination={{pageSize}}\r\n        />\r\n    );\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { SearchVariables } from '../Search/components/types';\r\nimport { useQuery } from '@apollo/client';\r\nimport GET_SEARCH_QUERY from '../../api/search/queries';\r\nimport { TypeName, UserNode, UserSearchInfo } from '../../api/search';\r\nimport { UserList } from '../UserList';\r\n\r\ntype UserSearchPageProps = {\r\n    searchVariables: SearchVariables;\r\n}\r\n\r\nexport const UserSearchPage: FC<UserSearchPageProps> = ({searchVariables}) => {\r\n\r\n    const [userResult, setUserResult] = useState<UserNode[]>([])\r\n\r\n    const {loading, data} = useQuery<UserSearchInfo>(GET_SEARCH_QUERY, {\r\n        variables: {...searchVariables}\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            const users = data?.search.nodes.filter((value) => value.__typename !== TypeName.ORGANIZATION);\r\n            setUserResult(users ?? []);\r\n        }\r\n    }, [loading, data]);\r\n\r\n\r\n    return (\r\n        <UserList data={userResult} loading={loading}/>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { SearchTypes } from '../types';\r\nimport { SearchVariables } from './types';\r\nimport { SearchRepositoriesList } from '../../SearchRepositoriesList';\r\nimport { UserSearchPage } from '../../UserSearchPage';\r\n\r\n\r\ninterface ResultListProps {\r\n    value: string;\r\n    searchType: SearchTypes;\r\n}\r\n\r\nexport const ResultList: FC<ResultListProps> = ({value, searchType}) => {\r\n\r\n     const isRepositorySearch = searchType === SearchTypes.REPOSITORY;\r\n\r\n    //todo: add debounce\r\n    const searchVariables: SearchVariables = {\r\n        count: 20,\r\n        type: searchType,\r\n        query: value\r\n    }\r\n\r\n    return (\r\n        isRepositorySearch ?\r\n            <SearchRepositoriesList searchVariables={searchVariables}/> :\r\n            <UserSearchPage searchVariables={searchVariables}/>\r\n    );\r\n}\r\n","import React, { FC, useState } from 'react';\r\nimport { GlobalSearch } from '../Search';\r\nimport { ResultList } from '../Search/components/ResultList';\r\nimport { SearchTypes } from '../Search/types';\r\n\r\n/**\r\n * Component for search page\r\n */\r\nexport const ExploreList: FC = () => {\r\n\r\n    const [searchValue, setSearchValue] = useState<string>('');\r\n    const [searchType, setSearchType] = useState<SearchTypes>(SearchTypes.REPOSITORY);\r\n\r\n\r\n    return (\r\n        <>\r\n            <GlobalSearch setSearchValue={setSearchValue} setSearchType={setSearchType}/>\r\n            <ResultList value={searchValue} searchType={searchType}/>\r\n        </>\r\n    );\r\n\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Layout } from 'antd';\r\nimport { ExploreList } from '../../components/ExploreList';\r\n\r\n\r\n/**\r\n * Component for searching a repository or user\r\n */\r\nexport const Explore: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <ExploreList />\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_USER_REPOSITORIES = gql`\r\n    query ($count: Int!){\r\n        viewer {\r\n            repositories(first: $count){\r\n                nodes {\r\n                    id\r\n                    name\r\n                    nameWithOwner\r\n                    owner {\r\n                        login\r\n                    }\r\n                    url\r\n                    description\r\n                    pushedAt\r\n                    stargazerCount\r\n                    languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n                        nodes {\r\n                            name\r\n                            color\r\n                        }\r\n                        totalCount\r\n                    }\r\n                    viewerHasStarred\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { RepositoryList } from '../RepositoryList';\r\nimport { UserRepositories } from '../../api/userRepositories';\r\nimport { GET_USER_REPOSITORIES } from '../../api/userRepositories/queries';\r\n\r\n\r\n/**\r\n * List of User RepositoriesPage\r\n * @see RepositoryList\r\n */\r\nexport const UserRepositoriesList: FC = () => {\r\n    const searchVariables = {\r\n        count: 10,\r\n    };\r\n    const {loading, data} = useQuery<UserRepositories>(GET_USER_REPOSITORIES, {\r\n        variables: {...searchVariables}\r\n    });\r\n    const [repositories, setRepositories] = useState<RepositoryNode[]>([]);\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setRepositories(data?.viewer.repositories.nodes ?? []);\r\n        }\r\n    }, [loading, data])\r\n\r\n    return (\r\n        <RepositoryList data={repositories} loading={loading} pageSize={4}/>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Layout } from 'antd';\r\nimport { UserRepositoriesList } from '../../components/UserRepositoriesList';\r\n\r\n/**\r\n * User own RepositoriesPage\r\n */\r\nexport const RepositoriesPage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <UserRepositoriesList/>\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import { ColumnType } from 'antd/lib/table';\r\nimport { RepositoryFile } from '../../api/repository';\r\nimport React from 'react';\r\nimport { FileTwoTone, FolderTwoTone } from '@ant-design/icons';\r\n\r\ntype RenderColumnFunction = Required<ColumnType<RepositoryFile>>['render'];\r\n\r\n/**\r\n * Renderers for RepositoryPage Files table\r\n */\r\nexport const renderIsBinary: RenderColumnFunction = (_, file) => (\r\n    file.object.isBinary ? <span>binary</span> : <span>non-binary</span>\r\n);\r\n\r\nexport const renderByteSize: RenderColumnFunction = (_, file) => (\r\n    file.object.byteSize ?? '-'\r\n);\r\n\r\nexport const renderType: RenderColumnFunction = (_, obj) => (\r\n    obj.type === 'blob' ? <FileTwoTone/> : <FolderTwoTone/>\r\n);\r\n","import React, { FC, useCallback, useMemo } from 'react';\r\nimport { Table } from 'antd';\r\nimport { RepositoryFile } from '../../api/repository';\r\nimport { ColumnsType, TableProps } from 'antd/lib/table';\r\nimport { renderByteSize, renderIsBinary, renderType } from './column-renderers';\r\n\r\ntype RepositoryFilesProps = {\r\n    files: RepositoryFile[];\r\n    loading: boolean;\r\n}\r\n\r\ntype GetRowKey = React.Component<TableProps<RepositoryFile>>['props']['rowKey'];\r\n\r\n/**\r\n * Table for repository files\r\n */\r\nexport const RepositoryFiles: FC<RepositoryFilesProps> = ({files, loading}) => {\r\n    const rowKey: GetRowKey = useCallback((file) => file.oid, [])\r\n    const columns: ColumnsType<RepositoryFile> = useMemo(() => [\r\n        {\r\n            title: 'Type',\r\n            dataIndex: 'type',\r\n            key: 'type',\r\n            render: renderType,\r\n            width: '10%',\r\n            filters: [\r\n                {text: 'File', value: 'blob'},\r\n                {text: 'Directory', value: 'tree'}\r\n            ],\r\n            onFilter: (value, record) => record.type === value,\r\n        },\r\n        {\r\n            title: 'Name',\r\n            dataIndex: 'name',\r\n            key: 'name',\r\n        },\r\n        {\r\n            title: 'isBinary',\r\n            dataIndex: 'isBinary',\r\n            key: 'isBinary',\r\n            render: renderIsBinary,\r\n        },\r\n        {\r\n            title: 'byteSize',\r\n            dataIndex: 'byteSize',\r\n            key: 'byteSize',\r\n            render: renderByteSize,\r\n        },\r\n\r\n    ] as ColumnsType<RepositoryFile>, []);\r\n    return (\r\n        <Table<RepositoryFile> rowKey={rowKey} columns={columns} pagination={false} dataSource={files}\r\n                               loading={loading}/>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Card } from 'antd';\r\nimport { RepositoryNode } from '../../api/repository';\r\nimport { formatDate } from '../../helpers';\r\nimport { RepositoryLanguage } from '../RepositoryLanguage';\r\nimport { RepositoryStar } from '../RepositoryStar';\r\n\r\ntype RepositoryDescriptionProps = {\r\n    info: RepositoryNode;\r\n    loading: boolean;\r\n}\r\n\r\n/**\r\n * Description component for repository\r\n */\r\nexport const RepositoryDescription: FC<RepositoryDescriptionProps> = ({info, loading}) => {\r\n    const formatted_date = formatDate(info.repository.createdAt);\r\n    return (\r\n        <Card title=\"About\" bordered={false} style={{width: 300}} loading={loading}>\r\n            <p><i>{info.repository.description}</i></p>\r\n            <p>Created at: <b>{formatted_date}</b></p>\r\n            <p>Disk usage: <b>{info.repository.diskUsage} KB</b></p>\r\n            <RepositoryStar\r\n                count={info.repository.stargazerCount}\r\n                hasStarred={info.repository.viewerHasStarred}\r\n                id={info.repository.id}\r\n            />\r\n            <br/>\r\n            <RepositoryLanguage languages={info.repository.languages.nodes}/>\r\n        </Card>\r\n    );\r\n}\r\n","import styled from 'styled-components';\r\nimport { Colors } from '../../shared';\r\n\r\nexport const UsernameWrapper = styled.span`\r\n    color: ${Colors.blue_7};\r\n    cursor: pointer;\r\n`;\r\n","import Title from 'antd/lib/typography/Title';\r\nimport { Col, Row } from 'antd';\r\nimport { RepositoryFiles } from '../RepositoryFiles';\r\nimport { RepositoryDescription } from '../RepositoryDescription';\r\nimport React, { FC, useCallback } from 'react';\r\nimport { RepositoryFile, RepositoryNode } from '../../api/repository';\r\nimport { useHistory } from 'react-router';\r\nimport { UsernameWrapper } from './styles';\r\n\r\ntype RepositoryOpenedProps = {\r\n    username: string;\r\n    repository: string;\r\n    info: RepositoryNode;\r\n    files: RepositoryFile[];\r\n    loading: boolean;\r\n}\r\n\r\n/**\r\n * Open repository content component\r\n */\r\nexport const RepositoryOpened: FC<RepositoryOpenedProps> = ({username, repository, info, files, loading}) => {\r\n    /**\r\n     * History for redirecting\r\n     */\r\n    const history = useHistory();\r\n    /**\r\n     * Handler for redirecting\r\n     */\r\n    const handleClick = useCallback(() => {\r\n        history.push(`/users/${username}`)\r\n    }, [history, username])\r\n    return (\r\n        <>\r\n            <Title style={{fontWeight: 'lighter'}}>\r\n                <UsernameWrapper onClick={handleClick}>{username}</UsernameWrapper>/{repository}\r\n            </Title>\r\n            <Row justify=\"space-between\">\r\n                <Col span={18}>\r\n                    <RepositoryFiles files={files} loading={loading}/>\r\n                </Col>\r\n                <Col span={5}>\r\n                    <RepositoryDescription info={info} loading={loading}/>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n    )\r\n}\r\n","import { useHistory } from 'react-router';\r\nimport React, { useCallback } from 'react';\r\nimport { Button, Result } from 'antd';\r\n\r\n/**\r\n * Private or archived repository component\r\n */\r\nexport const RepositoryClosed = () => {\r\n    /**\r\n     * History for redirecting\r\n     */\r\n    const history = useHistory();\r\n    /**\r\n     * Handler for redirecting\r\n     */\r\n    const handleClick = useCallback(() => {\r\n        history.goBack()\r\n    }, [history])\r\n    return (\r\n        <Result status=\"warning\" title=\"Sorry, can not access this repository.\"\r\n                extra={\r\n                    <Button type=\"primary\" key=\"console\" onClick={handleClick}>\r\n                        Go Back\r\n                    </Button>\r\n                }\r\n        />\r\n    )\r\n}\r\n","import React, { FC, useCallback } from 'react';\r\nimport { Result, Button } from 'antd';\r\nimport { Routes } from '../../constants';\r\nimport { useHistory } from 'react-router';\r\n\r\n\r\ninterface NotFoundPageProps {\r\n    title?: string,\r\n    subTitle?: string\r\n}\r\n\r\n/**\r\n * Page returned on 404 not found\r\n */\r\nexport const NotFoundPage: FC<NotFoundPageProps> = ({title = \"404\", subTitle = \"Sorry, the page you visited does not exist.\"}) => {\r\n    const history = useHistory();\r\n\r\n    const handleBackToRoot = useCallback(() => {\r\n        history.push(Routes.ROOT);\r\n    }, [history])\r\n\r\n    return (\r\n        <Result\r\n            status=\"404\"\r\n            title={title}\r\n            subTitle={subTitle}\r\n            extra={<Button type=\"primary\" onClick={handleBackToRoot}>Back Home</Button>}\r\n        />\r\n    )\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_REPOSITORY, RepositoryFile, RepositoryNode } from '../../api/repository';\r\nimport { useParams } from 'react-router';\r\nimport { RepositoryOpened } from '../RepositoryOpened';\r\nimport { RepositoryClosed } from '../RepositoryClosed';\r\nimport { Spin } from 'antd';\r\nimport { ApolloError } from '@apollo/client/errors';\r\nimport { NotFoundPage } from '../../pages/NotFound';\r\n\r\nconst initialRepository: RepositoryNode = {\r\n    repository: {\r\n        viewerHasStarred: false,\r\n        stargazerCount: 0,\r\n        id: '',\r\n        createdAt: '',\r\n        description: '',\r\n        diskUsage: 0,\r\n        isArchived: false,\r\n        isPrivate: false,\r\n        isDisabled: false,\r\n        isEmpty: false,\r\n        isLocked: false,\r\n        isSecurityPolicyEnabled: false,\r\n        languages: {nodes: [{color: '', name: ''}], totalCount: 0},\r\n        object: {entries: []}\r\n    }\r\n};\r\n\r\n/**\r\n RepositoryPage component\r\n */\r\nexport const Repository: FC = () => {\r\n    /**\r\n     * Params for query\r\n     */\r\n    const {username, repository} = useParams<{ username: string, repository: string }>();\r\n    /**\r\n     * State\r\n     */\r\n    const [open, setOpen] = useState<boolean>(true);\r\n    const [repositoryInfo, setRepositoryInfo] = useState<RepositoryNode>(initialRepository);\r\n    const [repositoryFiles, setRepositoryFiles] = useState<RepositoryFile[]>([]);\r\n    const [errors, setErrors] = useState<ApolloError>();\r\n\r\n    /**\r\n     * Get data from server\r\n     */\r\n    const {loading, data, error} = useQuery<RepositoryNode>(GET_REPOSITORY, {\r\n        variables: {\r\n            name: repository,\r\n            owner: username,\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Update data\r\n     */\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            if (error) {\r\n                setErrors(error);\r\n                return;\r\n            }\r\n            setRepositoryInfo(data ?? initialRepository);\r\n            if (data?.repository?.isArchived || data?.repository?.isPrivate ||\r\n                data?.repository?.isDisabled || data?.repository?.isEmpty ||\r\n                data?.repository?.isLocked || data?.repository?.isSecurityPolicyEnabled) {\r\n                setOpen(false);\r\n                return;\r\n            }\r\n            setRepositoryFiles(data?.repository?.object.entries ?? [])\r\n        }\r\n    }, [loading, data, error])\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            {!errors ?\r\n                <>\r\n                    {open ?\r\n                        <RepositoryOpened\r\n                            loading={loading}\r\n                            files={repositoryFiles}\r\n                            info={repositoryInfo}\r\n                            repository={repository}\r\n                            username={username}\r\n                        /> :\r\n                        <RepositoryClosed/>\r\n                    }\r\n                </> :\r\n                <NotFoundPage subTitle={errors?.message}/>\r\n            }\r\n        </Spin>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Layout } from 'antd';\r\nimport { Repository } from '../../components/Repository';\r\n\r\n\r\n/**\r\n * Any user repository page\r\n */\r\nexport const RepositoryPage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <Repository/>\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { useQuery } from '@apollo/client';\r\nimport { GET_USER_QUERY, UserProfileNode } from '../../api/user';\r\nimport { emptyUserProfileInfo } from '../Profile/types';\r\nimport { BaseUserProfile } from './BaseUserProfile';\r\nimport { NotFoundPage } from '../../pages/NotFound';\r\nimport { ApolloError } from '@apollo/client/errors';\r\nimport { Spin } from 'antd';\r\n\r\n/**\r\n * User ProfilePage by uri param\r\n * @see BaseUserProfile\r\n */\r\nexport const UserProfile: FC = () => {\r\n\r\n    const {username: login} = useParams();\r\n\r\n    const pinnedItemAmount = 4;\r\n\r\n    const [profileInfo, setProfileInfo] = useState<UserProfileNode>(emptyUserProfileInfo);\r\n    const [pinnedItems, setPinnedItems] = useState<RepositoryNode[]>([]);\r\n    const [errors, setErrors] = useState<ApolloError>();\r\n\r\n    const {loading, data, error} = useQuery<UserProfileNode>(GET_USER_QUERY, {\r\n        variables: {\r\n            count: pinnedItemAmount,\r\n            login: login\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            if (error) {\r\n                setErrors(error);\r\n                return;\r\n            }\r\n            setProfileInfo(data ?? emptyUserProfileInfo);\r\n            setPinnedItems(data?.user?.pinnedItems?.nodes ?? [])\r\n        }\r\n    }, [loading, data, error])\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            {!errors ?\r\n                (<BaseUserProfile user={profileInfo.user} loading={loading} pinnedItems={pinnedItems}/>) :\r\n                (<NotFoundPage subTitle={errors?.message}/>)\r\n            }\r\n        </Spin>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Layout } from 'antd';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { UserProfile } from '../../components/UserProfile';\r\n\r\n/**\r\n * Any user profile page\r\n */\r\nexport const UserProfilePage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <UserProfile />\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { Avatar } from 'antd';\r\nimport { useQuery } from '@apollo/client';\r\nimport { AvatarCell, StyledDiv } from '../UserInfo/styles';\r\nimport { PoppinsText } from '../../shared/PoppinsText';\r\nimport { GET_USER_QUERY, UserProfileNode } from '../../api/user';\r\nimport { useParams } from 'react-router';\r\n\r\n/**\r\n * User info in repositories list\r\n */\r\nexport const UserInfoBlock: FC = () => {\r\n    const {username: login } = useParams();\r\n\r\n    const searchVariables = {\r\n        count: 10,\r\n        login: login,\r\n    };\r\n    const {loading, data} = useQuery<UserProfileNode>(GET_USER_QUERY, {\r\n        variables: {...searchVariables}\r\n    });\r\n    const [avatarUrl, setAvatarUrl] = useState<string>('');\r\n    const [name, setName] = useState<string>('Github User');\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            setAvatarUrl(data?.user.avatarUrl ?? '');\r\n            setName(data?.user.name ?? 'Github User');\r\n        }\r\n    }, [loading, data])\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <AvatarCell>\r\n                <Avatar src={avatarUrl} shape=\"circle\" size={46}/>\r\n            </AvatarCell>\r\n            <AvatarCell>\r\n                <PoppinsText>{name}</PoppinsText>\r\n                <br/>\r\n                <PoppinsText type=\"secondary\">{login}</PoppinsText>\r\n            </AvatarCell>\r\n        </StyledDiv>\r\n    )\r\n\r\n}\r\n","import React, { FC, useEffect, useState } from 'react';\r\nimport { useQuery } from '@apollo/client';\r\nimport { RepositoryNode } from '../../api/search';\r\nimport { RepositoryList } from '../RepositoryList';\r\nimport { useParams } from 'react-router';\r\nimport { GET_USER_QUERY, UserProfileNode } from '../../api/user';\r\nimport { AvatarBlock } from '../NavigationMenu/styles';\r\nimport { UserInfoBlock } from '../UserInfoBlock';\r\nimport { ApolloError } from '@apollo/client/errors';\r\nimport { Spin } from 'antd';\r\nimport { NotFoundPage } from '../../pages/NotFound';\r\n\r\n\r\n/**\r\n * Repositories List for any user\r\n * @see RepositoryList\r\n */\r\nexport const RepositoriesList: FC = () => {\r\n    const {username: login} = useParams();\r\n\r\n    const searchVariables = {\r\n        count: 10,\r\n        login: login,\r\n    };\r\n    const {loading, data, error} = useQuery<UserProfileNode>(GET_USER_QUERY, {\r\n        variables: {...searchVariables}\r\n    });\r\n    const [repositories, setRepositories] = useState<RepositoryNode[]>([]);\r\n    const [errors, setErrors] = useState<ApolloError>();\r\n\r\n    useEffect(() => {\r\n        if (!loading) {\r\n            if (error) {\r\n                setErrors(error);\r\n                return;\r\n            }\r\n            setRepositories(data?.user.repositories.nodes ?? []);\r\n        }\r\n    }, [loading, data, error])\r\n\r\n    return (\r\n        <Spin spinning={loading}>\r\n            {!errors ?\r\n                <>\r\n                    <AvatarBlock>\r\n                        <UserInfoBlock/>\r\n                    </AvatarBlock>\r\n                    <RepositoryList data={repositories} loading={loading} pageSize={4}/>\r\n                </>\r\n                : <NotFoundPage subTitle={errors?.message}/>\r\n            }\r\n        </Spin>\r\n    );\r\n}\r\n","import React, { FC } from 'react';\r\nimport { Layout } from 'antd';\r\nimport { NavigationMenu } from '../../components/NavigationMenu';\r\nimport { Content, LayoutWrapper, PageWrapper } from '../../shared';\r\nimport { RepositoriesList } from '../../components/RepositoriesList';\r\n\r\n/**\r\n * Any user repositories page\r\n */\r\nexport const UserRepositoriesPage: FC = () => {\r\n    return (\r\n        <PageWrapper>\r\n            <LayoutWrapper>\r\n                <NavigationMenu/>\r\n                <Layout>\r\n                    <Content>\r\n                        <RepositoriesList />\r\n                    </Content>\r\n                </Layout>\r\n            </LayoutWrapper>\r\n        </PageWrapper>\r\n    );\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport { Routes as R } from './constants';\r\nimport { BrowserRouter as Router, Redirect, Route, Switch } from 'react-router-dom';\r\nimport { Login } from './pages/Login';\r\nimport { LoginOAuth } from './pages/LoginOAuth';\r\nimport { ProfilePage } from './pages/Profile';\r\nimport { PrivateRoute } from './components/PrivateRoute';\r\nimport { ApolloProvider } from '@apollo/client';\r\nimport { client } from './api';\r\nimport { Logout } from './pages/Logout';\r\nimport { Issues } from './pages/Issues';\r\nimport { PullRequestsPage } from './pages/PullRequests';\r\nimport { Explore } from './pages/Explore';\r\nimport { RepositoriesPage } from './pages/Repositories';\r\nimport { RepositoryPage } from './pages/Repository';\r\nimport { UserProfilePage } from './pages/UserProfile';\r\nimport { UserRepositoriesPage } from './pages/UserRepositories';\r\nimport { NotFoundPage } from './pages/NotFound';\r\n\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <ApolloProvider client={client}>\r\n            <Router>\r\n                <Switch>\r\n                    <Route exact path={R.LOGIN} component={Login}/>\r\n                    <Route exact path={R.OATH_LOGIN} component={LoginOAuth}/>\r\n                    <PrivateRoute exact path={[R.ROOT, R.PROFILE]} component={ProfilePage}/>\r\n                    <PrivateRoute exact path={R.LOGOUT} component={Logout}/>\r\n                    <PrivateRoute exact path={R.ISSUES} component={Issues}/>\r\n                    <PrivateRoute exact path={R.PULL_REQUESTS} component={PullRequestsPage}/>\r\n                    <PrivateRoute exact path={R.EXPLORE} component={Explore}/>\r\n                    <PrivateRoute exact path={R.REPOSITORIES} component={RepositoriesPage}/>\r\n                    <PrivateRoute exact path={R.REPOSITORY} component={RepositoryPage}/>\r\n                    <PrivateRoute path={R.USER} component={UserProfilePage}/>\r\n                    <PrivateRoute exact path={R.USER_REPOSITORY} component={UserRepositoriesPage}/>\r\n                    <PrivateRoute path={R.NOT_FOUND} component={NotFoundPage}/>\r\n                    <Redirect to={R.NOT_FOUND}/>\r\n                </Switch>\r\n            </Router>\r\n        </ApolloProvider>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t// [::1] is the IPv6 localhost address.\n\twindow.location.hostname === '[::1]' ||\n\t// 127.0.0.0/8 are considered localhost for IPv4.\n\twindow.location.hostname.match(\n\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\tprocess.env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\twindow.addEventListener('load', () => {\n\t\t\tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n\t\t\tif (isLocalhost) {\n\t\t\t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t\t\tcheckValidServiceWorker(swUrl, config);\n\n\t\t\t\t// Add some additional logging to localhost, pointing developers to the\n\t\t\t\t// service worker/PWA documentation.\n\t\t\t\tnavigator.serviceWorker.ready.then(() => {\n\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Is not localhost. Just register service worker\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t});\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\tconsole.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl, {\n\t\theaders: {'Service-Worker': 'script'}\n\t})\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready\n\t\t\t.then(registration => {\n\t\t\t\tregistration.unregister();\n\t\t\t})\n\t\t\t.catch(error => {\n\t\t\t\tconsole.error(error.message);\n\t\t\t});\n\t}\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export * from './types'\r\nexport * from './queries'\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_USER_INFO = gql`\r\n\tquery GetUserAvatar{\r\n  \t\tviewer {\r\n  \t\t    id\r\n    \t\tavatarUrl\r\n      \t\tname\r\n      \t\tlogin\r\n    \t}\r\n  \t}\r\n`;\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_PROFILE_QUERY = gql`\r\nquery($count: Int!) { \r\n  viewer { \r\n    id,\r\n    login,\r\n    name, \r\n    followers {\r\n      totalCount\r\n    }\r\n    following {\r\n      totalCount\r\n    }\r\n    url,\r\n    avatarUrl,\r\n    pinnedItems (first: $count){\r\n      nodes {\r\n        ... on Repository {\r\n        id\r\n        name  \r\n        nameWithOwner\r\n        owner {\r\n          login\r\n        }\r\n        url\r\n        description\r\n        pushedAt\r\n        stargazerCount\r\n        languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n          nodes {\r\n            name\r\n            color\r\n          }\r\n          totalCount\r\n        }\r\n        viewerHasStarred\r\n      }\r\n      }\r\n    },\r\n    repositories(first: $count){\r\n      nodes {\r\n        id\r\n        name\r\n        nameWithOwner\r\n        owner {\r\n          login\r\n        }\r\n        url\r\n        description\r\n        pushedAt\r\n        stargazerCount\r\n        languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n          nodes {\r\n            name\r\n            color\r\n          }\r\n          totalCount\r\n        }\r\n        viewerHasStarred\r\n      }\r\n    },\r\n    contributionsCollection{\r\n      contributionCalendar{\r\n        totalContributions\r\n        weeks {\r\n          contributionDays {\r\n            contributionCount,\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const ADD_STARR_QUERY = gql`\r\nmutation ($id: ID!) {\r\n  addStar(input: {starrableId: $id}) {\r\n    starrable {\r\n      stargazerCount\r\n      viewerHasStarred\r\n    }\r\n  }\r\n}\r\n`;\r\n\r\nexport const REMOVE_STARR_QUERY = gql`\r\nmutation ($id: ID!) {\r\n  removeStar(input: {starrableId: $id}) {\r\n    starrable {\r\n      stargazerCount\r\n      viewerHasStarred\r\n    }\r\n  }\r\n}\r\n`;\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_REPOSITORY = gql`\r\n    query ($name: String!, $owner: String!){\r\n        repository(owner: $owner, name: $name) {\r\n            createdAt\r\n            defaultBranchRef {\r\n                id\r\n            }\r\n            isArchived\r\n            isPrivate\r\n            isDisabled\r\n            isEmpty\r\n            isLocked\r\n            isSecurityPolicyEnabled\r\n            description\r\n            \r\n            viewerHasStarred\r\n            stargazerCount\r\n            id\r\n            \r\n            languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n                nodes {\r\n                    name\r\n                    color\r\n                }\r\n                totalCount\r\n            }\r\n            diskUsage\r\n            object(expression: \"master:\") {\r\n                ... on Tree {\r\n                    entries {\r\n                        oid\r\n                        name\r\n                        type\r\n                        object {\r\n                            ... on Blob {\r\n                                byteSize\r\n                                isBinary\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n","import { gql } from 'apollo-boost';\r\n\r\nexport const GET_USER_QUERY = gql`\r\nquery($login: String!, $count: Int!) { \r\n  user(login: $login) {\r\n    id,\r\n    login,\r\n    name, \r\n    followers {\r\n      totalCount\r\n    }\r\n    following {\r\n      totalCount\r\n    }\r\n    url,\r\n    avatarUrl,\r\n    repositories(first: $count){\r\n      nodes {\r\n        id\r\n        name\r\n        nameWithOwner\r\n        owner {\r\n          login\r\n        }\r\n        url\r\n        description\r\n        pushedAt\r\n        stargazerCount\r\n        languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n          nodes {\r\n            name\r\n            color\r\n          }\r\n          totalCount\r\n        }\r\n        viewerHasStarred\r\n      }\r\n    },\r\n    pinnedItems (first: $count){\r\n      nodes {\r\n        ... on Repository {\r\n        id\r\n        name  \r\n        nameWithOwner\r\n        owner {\r\n          login\r\n        }\r\n        url\r\n        description\r\n        pushedAt\r\n        stargazerCount\r\n        languages(first: 10, orderBy: {direction: DESC, field: SIZE}) {\r\n          nodes {\r\n            name\r\n            color\r\n          }\r\n          totalCount\r\n        }\r\n        viewerHasStarred\r\n      }\r\n      }\r\n    }\r\n    contributionsCollection{\r\n      contributionCalendar{\r\n        totalContributions\r\n        weeks {\r\n          contributionDays {\r\n            contributionCount,\r\n            date\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n`;\r\n","export * from './queries';\r\nexport * from  './types';\r\n","export * from './types';\r\nexport * from  './queries';\r\n","export * from './types';\r\nexport * from './queries';\r\n"],"sourceRoot":""}